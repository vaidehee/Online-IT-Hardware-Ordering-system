menu.cpp:45:3: style: Exception should be caught by reference. [catchExceptionByValue]
  catch(exception ex)
  ^
menu.cpp:100:3: style: Exception should be caught by reference. [catchExceptionByValue]
  catch(exception ex)
  ^
menu.cpp:152:3: style: Exception should be caught by reference. [catchExceptionByValue]
  catch(exception ex)
  ^
menu.cpp:206:3: style: Exception should be caught by reference. [catchExceptionByValue]
  catch(exception ex)
  ^
menu.cpp:269:3: style: Exception should be caught by reference. [catchExceptionByValue]
  catch(exception ex)
  ^
menu.cpp:319:3: style: Exception should be caught by reference. [catchExceptionByValue]
  catch(exception ex)
  ^
main.cpp:46:5: style: Exception should be caught by reference. [catchExceptionByValue]
    catch(exception ex)
    ^
menu.cpp:404:9: style: The comparison 'flag == 0' is always true. [knownConditionTrueFalse]
 if(flag==0 && choice!=6)
        ^
menu.cpp:354:11: note: 'flag' is assigned value '0' here.
 int flag=0;
          ^
menu.cpp:404:9: note: The comparison 'flag == 0' is always true.
 if(flag==0 && choice!=6)
        ^
menu.cpp:477:9: style: The comparison 'flag == 0' is always true. [knownConditionTrueFalse]
 if(flag==0 && choice!=6)
        ^
menu.cpp:423:11: note: 'flag' is assigned value '0' here.
 int flag=0;
          ^
menu.cpp:477:9: note: The comparison 'flag == 0' is always true.
 if(flag==0 && choice!=6)
        ^
func1.cpp:1661:6: style: The scope of the variable 'count' can be reduced. [variableScope]
 int count=0;
     ^
menu.cpp:367:8: style: Local variable 'flag' shadows outer variable [shadowVariable]
   int flag=1;
       ^
menu.cpp:354:6: note: Shadowed declaration
 int flag=0;
     ^
menu.cpp:367:8: note: Shadow variable
   int flag=1;
       ^
menu.cpp:436:8: style: Local variable 'flag' shadows outer variable [shadowVariable]
   int flag=1;
       ^
menu.cpp:423:6: note: Shadowed declaration
 int flag=0;
     ^
menu.cpp:436:8: note: Shadow variable
   int flag=1;
       ^
func3.cpp:53:7: style: Local variable 'temp' shadows outer variable [shadowVariable]
  int temp=sizeof(c);
      ^
header.hpp:130:8: note: Shadowed declaration
string temp;  //globally declaring string
       ^
func3.cpp:53:7: note: Shadow variable
  int temp=sizeof(c);
      ^
func3.cpp:109:7: style: Local variable 'temp' shadows outer variable [shadowVariable]
  int temp=sizeof(pr);
      ^
header.hpp:130:8: note: Shadowed declaration
string temp;  //globally declaring string
       ^
func3.cpp:109:7: note: Shadow variable
  int temp=sizeof(pr);
      ^
func3.cpp:165:7: style: Local variable 'temp' shadows outer variable [shadowVariable]
  int temp=sizeof(tr);
      ^
header.hpp:130:8: note: Shadowed declaration
string temp;  //globally declaring string
       ^
func3.cpp:165:7: note: Shadow variable
  int temp=sizeof(tr);
      ^
func3.cpp:219:7: style: Local variable 'temp' shadows outer variable [shadowVariable]
  int temp=sizeof(su);
      ^
header.hpp:130:8: note: Shadowed declaration
string temp;  //globally declaring string
       ^
func3.cpp:219:7: note: Shadow variable
  int temp=sizeof(su);
      ^
func1.cpp:1752:24: style: Parameter 'p1' can be declared with const [constParameter]
 prod.sort([](product &p1 ,product &p2){ return p1.units_sold>p2.units_sold;});
                       ^
func1.cpp:1752:37: style: Parameter 'p2' can be declared with const [constParameter]
 prod.sort([](product &p1 ,product &p2){ return p1.units_sold>p2.units_sold;});
                                    ^
func1.cpp:1760:24: style: Parameter 'p1' can be declared with const [constParameter]
 prod.sort([](product &p1 ,product &p2){ return p1.product_id<p2.product_id;});
                       ^
func1.cpp:1760:37: style: Parameter 'p2' can be declared with const [constParameter]
 prod.sort([](product &p1 ,product &p2){ return p1.product_id<p2.product_id;});
                                    ^
func1.cpp:42:6: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
   id=c.customer_id;
     ^
func1.cpp:465:12: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
   trans_id=ts.transaction_id;
           ^
func1.cpp:527:6: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
   id=s.supplier_id;
     ^
func1.cpp:613:6: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
   id=p.product_id;
     ^
func1.cpp:1370:6: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
   id=p.product_id;
     ^
menu.cpp:33:8: error: Uninitialized variable: choice [uninitvar]
 while(choice!=5)
       ^
menu.cpp:88:8: error: Uninitialized variable: choice [uninitvar]
 while(choice!=4)
       ^
menu.cpp:140:8: error: Uninitialized variable: choice [uninitvar]
 while(choice!=4)
       ^
menu.cpp:192:8: error: Uninitialized variable: choice [uninitvar]
 while(choice!=8)
       ^
menu.cpp:363:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=sup.end();it++)
                    ^
menu.cpp:432:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=cust.end();it++)
                     ^
func1.cpp:183:61: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<product>::iterator it=prod.begin();it!=prod.end();it++)
                                                            ^
func1.cpp:236:62: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for(list<product>::iterator it=prod.begin();it!=prod.end();it++)
                                                             ^
func1.cpp:322:23: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=trans.end();it++)
                      ^
func1.cpp:850:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=prod.end();it++)
                     ^
func1.cpp:889:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=prod.end();it++)
                     ^
func1.cpp:1103:61: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<product>::iterator it=prod.begin();it!=prod.end();it++)
                                                            ^
func1.cpp:1128:62: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<customer>::iterator it=cust.begin();it!=cust.end();it++)
                                                             ^
func1.cpp:1152:67: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<transaction>::iterator it=trans.begin();it!=trans.end();it++)
                                                                  ^
func1.cpp:1176:60: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<supplier>::iterator it=sup.begin();it!=sup.end();it++)
                                                           ^
func1.cpp:1219:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=sup.end();it++)
                    ^
func1.cpp:1275:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=cust.end();it++)
                     ^
func1.cpp:1330:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=prod.end();it++)
                     ^
func1.cpp:1521:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=sup.end();it++)
                    ^
func1.cpp:1573:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=cust.end();it++)
                     ^
func1.cpp:1624:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=prod.end();it++)
                     ^
func1.cpp:1664:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=prod.end();it++)
                     ^
func1.cpp:1718:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(;it!=prod.end();it++)
                     ^
func1.cpp:1753:39: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(int i=0;i!=3&&it!=prod.end();i++,it++)
                                      ^
func3.cpp:82:61: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<product> :: iterator t=prod.begin();t!=prod.end();t++)
                                                            ^
func3.cpp:133:67: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<transaction> :: iterator t=trans.begin();t!=trans.end();t++)
                                                                  ^
func3.cpp:192:60: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(list<supplier> :: iterator t=sup.begin();t!=sup.end();t++)
                                                           ^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

