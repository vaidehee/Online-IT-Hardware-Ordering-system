Flat profile:

Each sample counts as 0.01 seconds.
 no time accumulated

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
  0.00      0.00     0.00       23     0.00     0.00  int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)
  0.00      0.00     0.00       23     0.00     0.00  std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)
  0.00      0.00     0.00       23     0.00     0.00  __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)
  0.00      0.00     0.00       23     0.00     0.00  __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()
  0.00      0.00     0.00       23     0.00     0.00  __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()
  0.00      0.00     0.00       14     0.00     0.00  validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
  0.00      0.00     0.00       14     0.00     0.00  __gnu_cxx::__aligned_membuf<product>::_M_ptr()
  0.00      0.00     0.00       14     0.00     0.00  __gnu_cxx::__aligned_membuf<product>::_M_addr()
  0.00      0.00     0.00       14     0.00     0.00  std::_List_node<product>::_M_valptr()
  0.00      0.00     0.00       12     0.00     0.00  std::_List_iterator<product>::operator->() const
  0.00      0.00     0.00       11     0.00     0.00  std::_List_iterator<product>::_List_iterator(std::__detail::_List_node_base*)
  0.00      0.00     0.00        8     0.00     0.00  std::_List_iterator<supplier>::_List_iterator(std::__detail::_List_node_base*)
  0.00      0.00     0.00        7     0.00     0.00  __gnu_cxx::__aligned_membuf<customer>::_M_ptr()
  0.00      0.00     0.00        7     0.00     0.00  __gnu_cxx::__aligned_membuf<customer>::_M_addr()
  0.00      0.00     0.00        7     0.00     0.00  std::_List_node<customer>::_M_valptr()
  0.00      0.00     0.00        7     0.00     0.00  std::_List_iterator<customer>::_List_iterator(std::__detail::_List_node_base*)
  0.00      0.00     0.00        7     0.00     0.00  std::__cxx11::list<product, std::allocator<product> >::end()
  0.00      0.00     0.00        7     0.00     0.00  int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))()
  0.00      0.00     0.00        7     0.00     0.00  customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&)
  0.00      0.00     0.00        7     0.00     0.00  std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)
  0.00      0.00     0.00        6     0.00     0.00  customer::customer()
  0.00      0.00     0.00        6     0.00     0.00  customer::~customer()
  0.00      0.00     0.00        6     0.00     0.00  __gnu_cxx::__aligned_membuf<supplier>::_M_ptr()
  0.00      0.00     0.00        6     0.00     0.00  __gnu_cxx::__aligned_membuf<supplier>::_M_addr()
  0.00      0.00     0.00        6     0.00     0.00  std::_List_node<supplier>::_M_valptr()
  0.00      0.00     0.00        6     0.00     0.00  std::_List_iterator<transaction>::_List_iterator(std::__detail::_List_node_base*)
  0.00      0.00     0.00        6     0.00     0.00  std::operator!=(std::_List_iterator<product> const&, std::_List_iterator<product> const&)
  0.00      0.00     0.00        5     0.00     0.00  std::__cxx11::list<supplier, std::allocator<supplier> >::end()
  0.00      0.00     0.00        4     0.00     0.00  validations::take_choice()
  0.00      0.00     0.00        4     0.00     0.00  supplier::supplier()
  0.00      0.00     0.00        4     0.00     0.00  supplier::~supplier()
  0.00      0.00     0.00        4     0.00     0.00  std::_List_iterator<customer>::operator->() const
  0.00      0.00     0.00        4     0.00     0.00  std::_List_iterator<supplier>::operator->() const
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::list<product, std::allocator<product> >::empty() const
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::list<supplier, std::allocator<supplier> >::empty() const
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::list<transaction, std::allocator<transaction> >::end()
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::list<product, std::allocator<product> >::begin()
  0.00      0.00     0.00        4     0.00     0.00  std::__cxx11::list<customer, std::allocator<customer> >::end()
  0.00      0.00     0.00        4     0.00     0.00  std::__detail::_List_node_header::_M_init()
  0.00      0.00     0.00        4     0.00     0.00  std::__detail::_List_node_header::_List_node_header()
  0.00      0.00     0.00        4     0.00     0.00  transaction const& std::forward<transaction const&>(std::remove_reference<transaction const&>::type&)
  0.00      0.00     0.00        4     0.00     0.00  product const& std::forward<product const&>(std::remove_reference<product const&>::type&)
  0.00      0.00     0.00        4     0.00     0.00  customer const& std::forward<customer const&>(std::remove_reference<customer const&>::type&)
  0.00      0.00     0.00        4     0.00     0.00  supplier const& std::forward<supplier const&>(std::remove_reference<supplier const&>::type&)
  0.00      0.00     0.00        4     0.00     0.00  std::operator!=(std::_List_iterator<customer> const&, std::_List_iterator<customer> const&)
  0.00      0.00     0.00        4     0.00     0.00  std::operator!=(std::_List_iterator<supplier> const&, std::_List_iterator<supplier> const&)
  0.00      0.00     0.00        4     0.00     0.00  operator new(unsigned long, void*)
  0.00      0.00     0.00        3     0.00     0.00  product::~product()
  0.00      0.00     0.00        3     0.00     0.00  std::__cxx11::list<transaction, std::allocator<transaction> >::empty() const
  0.00      0.00     0.00        3     0.00     0.00  std::__cxx11::list<customer, std::allocator<customer> >::empty() const
  0.00      0.00     0.00        3     0.00     0.00  std::__cxx11::list<customer, std::allocator<customer> >::begin()
  0.00      0.00     0.00        3     0.00     0.00  std::__cxx11::list<supplier, std::allocator<supplier> >::begin()
  0.00      0.00     0.00        3     0.00     0.00  std::operator!=(std::_List_iterator<transaction> const&, std::_List_iterator<transaction> const&)
  0.00      0.00     0.00        2     0.00     0.00  admin_corner()
  0.00      0.00     0.00        2     0.00     0.00  __gthread_active_p()
  0.00      0.00     0.00        2     0.00     0.00  transaction::~transaction()
  0.00      0.00     0.00        2     0.00     0.00  validations::check_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
  0.00      0.00     0.00        2     0.00     0.00  validations::check_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
  0.00      0.00     0.00        2     0.00     0.00  validations::check_address(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
  0.00      0.00     0.00        2     0.00     0.00  product::get_product_id()
  0.00      0.00     0.00        2     0.00     0.00  product::get_units_sold()
  0.00      0.00     0.00        2     0.00     0.00  product::get_no_of_units()
  0.00      0.00     0.00        2     0.00     0.00  product::get_product_name[abi:cxx11]()
  0.00      0.00     0.00        2     0.00     0.00  product::get_cost()
  0.00      0.00     0.00        2     0.00     0.00  product::product()
  0.00      0.00     0.00        2     0.00     0.00  customer::get_customer_id()
  0.00      0.00     0.00        2     0.00     0.00  customer::get_customer_name[abi:cxx11]()
  0.00      0.00     0.00        2     0.00     0.00  customer::customer(customer const&)
  0.00      0.00     0.00        2     0.00     0.00  supplier::get_supplier_name[abi:cxx11]()
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__aligned_membuf<transaction>::_M_ptr()
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__aligned_membuf<transaction>::_M_addr()
  0.00      0.00     0.00        2     0.00     0.00  long __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)
  0.00      0.00     0.00        2     0.00     0.00  std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_node<transaction>::_M_valptr()
  0.00      0.00     0.00        2     0.00     0.00  std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)
  0.00      0.00     0.00        2     0.00     0.00  std::_List_iterator<product>::operator++(int)
  0.00      0.00     0.00        2     0.00     0.00  std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr()
  0.00      0.00     0.00        2     0.00     0.00  std::thread::id::id()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_Node_allocator()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_Node_allocator()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_Node_allocator()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_Node_allocator()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::list<transaction, std::allocator<transaction> >::begin()
  0.00      0.00     0.00        2     0.00     0.00  std::__cxx11::stol(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)
  0.00      0.00     0.00        2     0.00     0.00  std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)
  0.00      0.00     0.00        2     0.00     0.00  std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)
  0.00      0.00     0.00        2     0.00     0.00  std::remove_reference<std::tuple<int (customer::*)(), customer*>&>::type&& std::move<std::tuple<int (customer::*)(), customer*>&>(std::tuple<int (customer::*)(), customer*>&)
  0.00      0.00     0.00        2     0.00     0.00  customer*&& std::forward<customer*>(std::remove_reference<customer*>::type&)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, false>)
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()
  0.00      0.00     0.00        2     0.00     0.00  __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I_ad
  0.00      0.00     0.00        1     0.00     0.00  customer_corner()
  0.00      0.00     0.00        1     0.00     0.00  supplier_corner()
  0.00      0.00     0.00        1     0.00     0.00  product_file_to_list()
  0.00      0.00     0.00        1     0.00     0.00  product_list_to_file()
  0.00      0.00     0.00        1     0.00     0.00  customer_file_to_list()
  0.00      0.00     0.00        1     0.00     0.00  customer_list_to_file()
  0.00      0.00     0.00        1     0.00     0.00  supplier_file_to_list()
  0.00      0.00     0.00        1     0.00     0.00  supplier_list_to_file()
  0.00      0.00     0.00        1     0.00     0.00  transaction_file_to_list()
  0.00      0.00     0.00        1     0.00     0.00  transaction_list_to_file()
  0.00      0.00     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00      0.00     0.00        1     0.00     0.00  __gthread_mutex_lock(pthread_mutex_t*)
  0.00      0.00     0.00        1     0.00     0.00  __gthread_mutex_unlock(pthread_mutex_t*)
  0.00      0.00     0.00        1     0.00     0.00  transaction::generate_bill(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, int, int)
  0.00      0.00     0.00        1     0.00     0.00  transaction::transaction(transaction const&)
  0.00      0.00     0.00        1     0.00     0.00  transaction::transaction()
  0.00      0.00     0.00        1     0.00     0.00  validations::password_check()
  0.00      0.00     0.00        1     0.00     0.00  validations::take_customer_id()
  0.00      0.00     0.00        1     0.00     0.00  validations::take_supplier_id()
  0.00      0.00     0.00        1     0.00     0.00  Admin::top_three_product()
  0.00      0.00     0.00        1     0.00     0.00  Admin::Admin()
  0.00      0.00     0.00        1     0.00     0.00  product::set_units_sold(int)
  0.00      0.00     0.00        1     0.00     0.00  product::set_no_of_units(int)
  0.00      0.00     0.00        1     0.00     0.00  product::product(product const&)
  0.00      0.00     0.00        1     0.00     0.00  customer::place_order()
  0.00      0.00     0.00        1     0.00     0.00  customer::login_customer()
  0.00      0.00     0.00        1     0.00     0.00  customer::register_customer()
  0.00      0.00     0.00        1     0.00     0.00  supplier::add_product()
  0.00      0.00     0.00        1     0.00     0.00  supplier::login_supplier()
  0.00      0.00     0.00        1     0.00     0.00  supplier::get_supplier_id()
  0.00      0.00     0.00        1     0.00     0.00  supplier::register_supplier()
  0.00      0.00     0.00        1     0.00     0.00  supplier::supplier(supplier const&)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<transaction> >::deallocate(std::_List_node<transaction>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::_List_node<transaction> >::destroy<transaction>(transaction*)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<transaction> >::allocate(unsigned long, void const*)
  0.00      0.00     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::_List_node<transaction> >::construct<transaction, transaction const&>(transaction*, transaction const&)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<transaction> >::new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<transaction> >::~new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<product> >::deallocate(std::_List_node<product>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::_List_node<product> >::destroy<product>(product*)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<product> >::allocate(unsigned long, void const*)
  0.00      0.00     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::_List_node<product> >::construct<product, product const&>(product*, product const&)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<product> >::new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<product> >::~new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<customer> >::deallocate(std::_List_node<customer>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::_List_node<customer> >::destroy<customer>(customer*)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<customer> >::allocate(unsigned long, void const*)
  0.00      0.00     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::_List_node<customer> >::construct<customer, customer const&>(customer*, customer const&)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<customer> >::new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<customer> >::~new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<supplier> >::deallocate(std::_List_node<supplier>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::_List_node<supplier> >::destroy<supplier>(supplier*)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<supplier> >::allocate(unsigned long, void const*)
  0.00      0.00     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::_List_node<supplier> >::construct<supplier, supplier const&>(supplier*, supplier const&)
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<supplier> >::new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<supplier> >::~new_allocator()
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<transaction> >::_M_max_size() const
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<product> >::_M_max_size() const
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<customer> >::_M_max_size() const
  0.00      0.00     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_List_node<supplier> >::_M_max_size() const
  0.00      0.00     0.00        1     0.00     0.00  std::_List_iterator<customer>::operator*() const
  0.00      0.00     0.00        1     0.00     0.00  std::integral_constant<bool, true>::operator bool() const
  0.00      0.00     0.00        1     0.00     0.00  std::thread::joinable() const
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<transaction> >::allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<transaction> >::~allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<product> >::allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<product> >::~allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<customer> >::allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<customer> >::~allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<supplier> >::allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<supplier> >::~allocator()
  0.00      0.00     0.00        1     0.00     0.00  std::_Head_base<0ul, int (customer::*)(), false>::_M_head(std::_Head_base<0ul, int (customer::*)(), false>&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Head_base<0ul, int (customer::*)(), false>::_Head_base<int (customer::*)()>(int (customer::*&&)())
  0.00      0.00     0.00        1     0.00     0.00  std::_Head_base<0ul, std::thread::_State*, false>::_Head_base()
  0.00      0.00     0.00        1     0.00     0.00  std::_Head_base<1ul, customer*, false>::_M_head(std::_Head_base<1ul, customer*, false>&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Head_base<1ul, customer*, false>::_Head_base<customer*&>(customer*&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::thread::_State>, true>::_Head_base()
  0.00      0.00     0.00        1     0.00     0.00  std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*)
  0.00      0.00     0.00        1     0.00     0.00  std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr()
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_M_head(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_Tuple_impl<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, customer*>::_M_head(std::_Tuple_impl<1ul, customer*>&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, customer*>::_Tuple_impl<customer*&>(customer*&)
  0.00      0.00     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::_List_iterator<transaction>::operator++(int)
  0.00      0.00     0.00        1     0.00     0.00  std::_List_iterator<customer>::operator++()
  0.00      0.00     0.00        1     0.00     0.00  std::_List_iterator<supplier>::operator++(int)
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::__allocated_ptr(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*)
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::~__allocated_ptr()
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::operator=(decltype(nullptr))
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<product> > >::__allocated_ptr(std::allocator<std::_List_node<product> >&, std::_List_node<product>*)
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<product> > >::~__allocated_ptr()
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<product> > >::operator=(decltype(nullptr))
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::__allocated_ptr(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*)
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::~__allocated_ptr()
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::operator=(decltype(nullptr))
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::__allocated_ptr(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*)
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::~__allocated_ptr()
  0.00      0.00     0.00        1     0.00     0.00  std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::operator=(decltype(nullptr))
  0.00      0.00     0.00        1     0.00     0.00  std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*)
  0.00      0.00     0.00        1     0.00     0.00  std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_List_node<transaction> > >::deallocate(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::destroy<transaction>(std::allocator<std::_List_node<transaction> >&, transaction*)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_List_node<transaction> > >::allocate(std::allocator<std::_List_node<transaction> >&, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::construct<transaction, transaction const&>(std::allocator<std::_List_node<transaction> >&, transaction*, transaction const&)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_List_node<product> > >::deallocate(std::allocator<std::_List_node<product> >&, std::_List_node<product>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::_List_node<product> > >::destroy<product>(std::allocator<std::_List_node<product> >&, product*)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_List_node<product> > >::allocate(std::allocator<std::_List_node<product> >&, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::_List_node<product> > >::construct<product, product const&>(std::allocator<std::_List_node<product> >&, product*, product const&)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_List_node<customer> > >::deallocate(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::_List_node<customer> > >::destroy<customer>(std::allocator<std::_List_node<customer> >&, customer*)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_List_node<customer> > >::allocate(std::allocator<std::_List_node<customer> >&, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::_List_node<customer> > >::construct<customer, customer const&>(std::allocator<std::_List_node<customer> >&, customer*, customer const&)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_List_node<supplier> > >::deallocate(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::destroy<supplier>(std::allocator<std::_List_node<supplier> >&, supplier*)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_List_node<supplier> > >::allocate(std::allocator<std::_List_node<supplier> >&, unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::construct<supplier, supplier const&>(std::allocator<std::_List_node<supplier> >&, supplier*, supplier const&)
  0.00      0.00     0.00        1     0.00     0.00  std::mutex::lock()
  0.00      0.00     0.00        1     0.00     0.00  std::mutex::unlock()
  0.00      0.00     0.00        1     0.00     0.00  std::tuple<int (customer::*)(), customer*>::tuple<int (customer::*)(), customer*&, true>(int (customer::*&&)(), customer*&)
  0.00      0.00     0.00        1     0.00     0.00  std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>()
  0.00      0.00     0.00        1     0.00     0.00  std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::_State_impl<int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&)
  0.00      0.00     0.00        1     0.00     0.00  std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::~_State_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >, int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&)
  0.00      0.00     0.00        1     0.00     0.00  std::thread::_State::_State()
  0.00      0.00     0.00        1     0.00     0.00  int std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>)
  0.00      0.00     0.00        1     0.00     0.00  std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::operator()()
  0.00      0.00     0.00        1     0.00     0.00  std::thread::thread<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&)
  0.00      0.00     0.00        1     0.00     0.00  std::thread::~thread()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::_List_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::~_List_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_node()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_inc_size(unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_put_node(std::_List_node<transaction>*)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_clear()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_base()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<transaction, std::allocator<transaction> >::~_List_base()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::_List_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::~_List_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_node()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<product, std::allocator<product> >::_M_inc_size(unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<product, std::allocator<product> >::_M_put_node(std::_List_node<product>*)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<product, std::allocator<product> >::_M_clear()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<product, std::allocator<product> >::_List_base()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<product, std::allocator<product> >::~_List_base()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::_List_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::~_List_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_node()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_inc_size(unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_put_node(std::_List_node<customer>*)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_clear()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_base()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<customer, std::allocator<customer> >::~_List_base()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::_List_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::~_List_impl()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_node()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_inc_size(unsigned long)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_put_node(std::_List_node<supplier>*)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_clear()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_base()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::_List_base<supplier, std::allocator<supplier> >::~_List_base()
  0.00      0.00     0.00        1     0.00     0.00  std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&)
  0.00      0.00     0.00        1     0.00     0.00  void std::__cxx11::list<transaction, std::allocator<transaction> >::_M_insert<transaction const&>(std::_List_iterator<transaction>, transaction const&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::list<transaction, std::allocator<transaction> >::push_back(transaction const&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::list<transaction, std::allocator<transaction> >::list()
  0.00      0.00     0.00        1     0.00     0.00  std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&)
  0.00      0.00     0.00        1     0.00     0.00  void std::__cxx11::list<product, std::allocator<product> >::sort<Admin::top_three_product()::{lambda(product&, product&)#2}>(Admin::top_three_product()::{lambda(product&, product&)#2})
  0.00      0.00     0.00        1     0.00     0.00  void std::__cxx11::list<product, std::allocator<product> >::sort<Admin::top_three_product()::{lambda(product&, product&)#1}>(Admin::top_three_product()::{lambda(product&, product&)#1})
  0.00      0.00     0.00        1     0.00     0.00  void std::__cxx11::list<product, std::allocator<product> >::_M_insert<product const&>(std::_List_iterator<product>, product const&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::list<product, std::allocator<product> >::push_back(product const&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::list<product, std::allocator<product> >::list()
  0.00      0.00     0.00        1     0.00     0.00  std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&)
  0.00      0.00     0.00        1     0.00     0.00  void std::__cxx11::list<customer, std::allocator<customer> >::_M_insert<customer const&>(std::_List_iterator<customer>, customer const&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::list<customer, std::allocator<customer> >::push_back(customer const&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::list<customer, std::allocator<customer> >::list()
  0.00      0.00     0.00        1     0.00     0.00  std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&)
  0.00      0.00     0.00        1     0.00     0.00  void std::__cxx11::list<supplier, std::allocator<supplier> >::_M_insert<supplier const&>(std::_List_iterator<supplier>, supplier const&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::list<supplier, std::allocator<supplier> >::push_back(supplier const&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::list<supplier, std::allocator<supplier> >::list()
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::to_string(int)
  0.00      0.00     0.00        1     0.00     0.00  unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)
  0.00      0.00     0.00        1     0.00     0.00  void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<transaction> >* std::__addressof<std::allocator<std::_List_node<transaction> > >(std::allocator<std::_List_node<transaction> >&)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<product> >* std::__addressof<std::allocator<std::_List_node<product> > >(std::allocator<std::_List_node<product> >&)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<customer> >* std::__addressof<std::allocator<std::_List_node<customer> > >(std::allocator<std::_List_node<customer> >&)
  0.00      0.00     0.00        1     0.00     0.00  std::allocator<std::_List_node<supplier> >* std::__addressof<std::allocator<std::_List_node<supplier> > >(std::allocator<std::_List_node<supplier> >&)
  0.00      0.00     0.00        1     0.00     0.00  int (customer::*&std::__get_helper<0ul, int (customer::*)(), customer*>(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&))()
  0.00      0.00     0.00        1     0.00     0.00  customer*& std::__get_helper<1ul, customer*>(std::_Tuple_impl<1ul, customer*>&)
  0.00      0.00     0.00        1     0.00     0.00  int std::__invoke_impl<int, int (customer::*)(), customer*>(std::__invoke_memfun_deref, int (customer::*&&)(), customer*&&)
  0.00      0.00     0.00        1     0.00     0.00  std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&)
  0.00      0.00     0.00        1     0.00     0.00  std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&)
  0.00      0.00     0.00        1     0.00     0.00  std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&)
  0.00      0.00     0.00        1     0.00     0.00  std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
  0.00      0.00     0.00        1     0.00     0.00  int (customer::*&&std::forward<int (customer::*&&)()>(std::remove_reference<int (customer::*&&)()>::type&))()
  0.00      0.00     0.00        1     0.00     0.00  customer*&& std::forward<customer*&&>(std::remove_reference<customer*&&>::type&)
  0.00      0.00     0.00        1     0.00     0.00  std::__invoke_result<int (customer::*)(), customer*>::type std::__invoke<int (customer::*)(), customer*>(int (customer::*&&)(), customer*&&)
  0.00      0.00     0.00        1     0.00     0.00  std::operator==(std::thread::id, std::thread::id)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
  0.00      0.00     0.00        1     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)

			Call graph


granularity: each sample hit covers 2 byte(s) no time propagated

index % time    self  children    called     name
                0.00    0.00      23/23          std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
[8]      0.0    0.00    0.00      23         int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [8]
                0.00    0.00      23/23          __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno() [11]
                0.00    0.00      23/23          __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>) [10]
                0.00    0.00      23/23          __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() [12]
-----------------------------------------------
                0.00    0.00       1/23          validations::take_supplier_id() [118]
                0.00    0.00       1/23          validations::take_customer_id() [117]
                0.00    0.00       2/23          admin_corner() [61]
                0.00    0.00       2/23          supplier::add_product() [127]
                0.00    0.00       3/23          supplier_corner() [101]
                0.00    0.00       3/23          customer_corner() [100]
                0.00    0.00       3/23          customer::place_order() [124]
                0.00    0.00       4/23          main [6]
                0.00    0.00       4/23          validations::take_choice() [36]
[9]      0.0    0.00    0.00      23         std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
                0.00    0.00      23/23          int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [8]
-----------------------------------------------
                0.00    0.00      23/23          int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [8]
[10]     0.0    0.00    0.00      23         __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>) [10]
-----------------------------------------------
                0.00    0.00      23/23          int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [8]
[11]     0.0    0.00    0.00      23         __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno() [11]
-----------------------------------------------
                0.00    0.00      23/23          int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [8]
[12]     0.0    0.00    0.00      23         __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() [12]
-----------------------------------------------
                0.00    0.00       1/14          customer::register_customer() [126]
                0.00    0.00       1/14          validations::take_supplier_id() [118]
                0.00    0.00       1/14          validations::take_customer_id() [117]
                0.00    0.00       2/14          supplier::register_supplier() [130]
                0.00    0.00       2/14          supplier::add_product() [127]
                0.00    0.00       3/14          customer::place_order() [124]
                0.00    0.00       4/14          validations::take_choice() [36]
[13]     0.0    0.00    0.00      14         validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [13]
-----------------------------------------------
                0.00    0.00      14/14          std::_List_node<product>::_M_valptr() [16]
[14]     0.0    0.00    0.00      14         __gnu_cxx::__aligned_membuf<product>::_M_ptr() [14]
                0.00    0.00      14/14          __gnu_cxx::__aligned_membuf<product>::_M_addr() [15]
-----------------------------------------------
                0.00    0.00      14/14          __gnu_cxx::__aligned_membuf<product>::_M_ptr() [14]
[15]     0.0    0.00    0.00      14         __gnu_cxx::__aligned_membuf<product>::_M_addr() [15]
-----------------------------------------------
                0.00    0.00       1/14          std::__cxx11::_List_base<product, std::allocator<product> >::_M_clear() [243]
                0.00    0.00       1/14          std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
                0.00    0.00      12/14          std::_List_iterator<product>::operator->() const [17]
[16]     0.0    0.00    0.00      14         std::_List_node<product>::_M_valptr() [16]
                0.00    0.00      14/14          __gnu_cxx::__aligned_membuf<product>::_M_ptr() [14]
-----------------------------------------------
                0.00    0.00       5/12          Admin::top_three_product() [119]
                0.00    0.00       7/12          customer::place_order() [124]
[17]     0.0    0.00    0.00      12         std::_List_iterator<product>::operator->() const [17]
                0.00    0.00      12/14          std::_List_node<product>::_M_valptr() [16]
-----------------------------------------------
                0.00    0.00       4/11          std::__cxx11::list<product, std::allocator<product> >::begin() [44]
                0.00    0.00       7/11          std::__cxx11::list<product, std::allocator<product> >::end() [24]
[18]     0.0    0.00    0.00      11         std::_List_iterator<product>::_List_iterator(std::__detail::_List_node_base*) [18]
-----------------------------------------------
                0.00    0.00       3/8           std::__cxx11::list<supplier, std::allocator<supplier> >::begin() [59]
                0.00    0.00       5/8           std::__cxx11::list<supplier, std::allocator<supplier> >::end() [35]
[19]     0.0    0.00    0.00       8         std::_List_iterator<supplier>::_List_iterator(std::__detail::_List_node_base*) [19]
-----------------------------------------------
                0.00    0.00       7/7           std::_List_node<customer>::_M_valptr() [22]
[20]     0.0    0.00    0.00       7         __gnu_cxx::__aligned_membuf<customer>::_M_ptr() [20]
                0.00    0.00       7/7           __gnu_cxx::__aligned_membuf<customer>::_M_addr() [21]
-----------------------------------------------
                0.00    0.00       7/7           __gnu_cxx::__aligned_membuf<customer>::_M_ptr() [20]
[21]     0.0    0.00    0.00       7         __gnu_cxx::__aligned_membuf<customer>::_M_addr() [21]
-----------------------------------------------
                0.00    0.00       1/7           std::_List_iterator<customer>::operator*() const [160]
                0.00    0.00       1/7           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_clear() [251]
                0.00    0.00       1/7           std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
                0.00    0.00       4/7           std::_List_iterator<customer>::operator->() const [39]
[22]     0.0    0.00    0.00       7         std::_List_node<customer>::_M_valptr() [22]
                0.00    0.00       7/7           __gnu_cxx::__aligned_membuf<customer>::_M_ptr() [20]
-----------------------------------------------
                0.00    0.00       3/7           std::__cxx11::list<customer, std::allocator<customer> >::begin() [58]
                0.00    0.00       4/7           std::__cxx11::list<customer, std::allocator<customer> >::end() [45]
[23]     0.0    0.00    0.00       7         std::_List_iterator<customer>::_List_iterator(std::__detail::_List_node_base*) [23]
-----------------------------------------------
                0.00    0.00       1/7           customer::place_order() [124]
                0.00    0.00       1/7           supplier::add_product() [127]
                0.00    0.00       1/7           std::__cxx11::list<product, std::allocator<product> >::push_back(product const&) [270]
                0.00    0.00       2/7           Admin::top_three_product() [119]
                0.00    0.00       2/7           product_list_to_file() [103]
[24]     0.0    0.00    0.00       7         std::__cxx11::list<product, std::allocator<product> >::end() [24]
                0.00    0.00       7/11          std::_List_iterator<product>::_List_iterator(std::__detail::_List_node_base*) [18]
-----------------------------------------------
                0.00    0.00       1/7           std::thread::thread<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [228]
                0.00    0.00       1/7           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >, int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [224]
                0.00    0.00       1/7           std::tuple<int (customer::*)(), customer*>::tuple<int (customer::*)(), customer*&, true>(int (customer::*&&)(), customer*&) [220]
                0.00    0.00       1/7           std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::_State_impl<int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [222]
                0.00    0.00       1/7           std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_Tuple_impl<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [180]
                0.00    0.00       1/7           std::_Head_base<0ul, int (customer::*)(), false>::_Head_base<int (customer::*)()>(int (customer::*&&)()) [172]
                0.00    0.00       1/7           std::__invoke_result<int (customer::*)(), customer*>::type std::__invoke<int (customer::*)(), customer*>(int (customer::*&&)(), customer*&&) [297]
[25]     0.0    0.00    0.00       7         int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))() [25]
-----------------------------------------------
                0.00    0.00       1/7           std::thread::thread<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [228]
                0.00    0.00       1/7           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >, int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [224]
                0.00    0.00       1/7           std::tuple<int (customer::*)(), customer*>::tuple<int (customer::*)(), customer*&, true>(int (customer::*&&)(), customer*&) [220]
                0.00    0.00       1/7           std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::_State_impl<int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [222]
                0.00    0.00       1/7           std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_Tuple_impl<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [180]
                0.00    0.00       1/7           std::_Tuple_impl<1ul, customer*>::_Tuple_impl<customer*&>(customer*&) [183]
                0.00    0.00       1/7           std::_Head_base<1ul, customer*, false>::_Head_base<customer*&>(customer*&) [175]
[26]     0.0    0.00    0.00       7         customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&) [26]
-----------------------------------------------
                0.00    0.00       1/7           customer_list_to_file() [105]
                0.00    0.00       1/7           customer_file_to_list() [104]
                0.00    0.00       1/7           product_list_to_file() [103]
                0.00    0.00       1/7           product_file_to_list() [102]
                0.00    0.00       1/7           transaction_list_to_file() [109]
                0.00    0.00       1/7           supplier_list_to_file() [107]
                0.00    0.00       1/7           supplier_file_to_list() [106]
[27]     0.0    0.00    0.00       7         std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [27]
-----------------------------------------------
                0.00    0.00       1/6           customer_corner() [100]
                0.00    0.00       1/6           customer::register_customer() [126]
                0.00    0.00       1/6           customer_file_to_list() [104]
                0.00    0.00       1/6           Admin::Admin() [120]
                0.00    0.00       2/6           customer::login_customer() [125]
[28]     0.0    0.00    0.00       6         customer::customer() [28]
-----------------------------------------------
                0.00    0.00       1/6           customer_corner() [100]
                0.00    0.00       1/6           customer::register_customer() [126]
                0.00    0.00       1/6           customer_list_to_file() [105]
                0.00    0.00       1/6           customer_file_to_list() [104]
                0.00    0.00       1/6           void __gnu_cxx::new_allocator<std::_List_node<customer> >::destroy<customer>(customer*) [145]
                0.00    0.00       1/6           Admin::~Admin() [319]
[29]     0.0    0.00    0.00       6         customer::~customer() [29]
-----------------------------------------------
                0.00    0.00       6/6           std::_List_node<supplier>::_M_valptr() [32]
[30]     0.0    0.00    0.00       6         __gnu_cxx::__aligned_membuf<supplier>::_M_ptr() [30]
                0.00    0.00       6/6           __gnu_cxx::__aligned_membuf<supplier>::_M_addr() [31]
-----------------------------------------------
                0.00    0.00       6/6           __gnu_cxx::__aligned_membuf<supplier>::_M_ptr() [30]
[31]     0.0    0.00    0.00       6         __gnu_cxx::__aligned_membuf<supplier>::_M_addr() [31]
-----------------------------------------------
                0.00    0.00       1/6           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_clear() [259]
                0.00    0.00       1/6           std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
                0.00    0.00       4/6           std::_List_iterator<supplier>::operator->() const [40]
[32]     0.0    0.00    0.00       6         std::_List_node<supplier>::_M_valptr() [32]
                0.00    0.00       6/6           __gnu_cxx::__aligned_membuf<supplier>::_M_ptr() [30]
-----------------------------------------------
                0.00    0.00       2/6           std::__cxx11::list<transaction, std::allocator<transaction> >::begin() [90]
                0.00    0.00       4/6           std::__cxx11::list<transaction, std::allocator<transaction> >::end() [43]
[33]     0.0    0.00    0.00       6         std::_List_iterator<transaction>::_List_iterator(std::__detail::_List_node_base*) [33]
-----------------------------------------------
                0.00    0.00       1/6           customer::place_order() [124]
                0.00    0.00       1/6           supplier::add_product() [127]
                0.00    0.00       2/6           Admin::top_three_product() [119]
                0.00    0.00       2/6           product_list_to_file() [103]
[34]     0.0    0.00    0.00       6         std::operator!=(std::_List_iterator<product> const&, std::_List_iterator<product> const&) [34]
-----------------------------------------------
                0.00    0.00       1/5           supplier::login_supplier() [128]
                0.00    0.00       1/5           supplier::register_supplier() [130]
                0.00    0.00       1/5           std::__cxx11::list<supplier, std::allocator<supplier> >::push_back(supplier const&) [278]
                0.00    0.00       2/5           supplier_list_to_file() [107]
[35]     0.0    0.00    0.00       5         std::__cxx11::list<supplier, std::allocator<supplier> >::end() [35]
                0.00    0.00       5/8           std::_List_iterator<supplier>::_List_iterator(std::__detail::_List_node_base*) [19]
-----------------------------------------------
                0.00    0.00       2/4           supplier::login_supplier() [128]
                0.00    0.00       2/4           customer::login_customer() [125]
[36]     0.0    0.00    0.00       4         validations::take_choice() [36]
                0.00    0.00       4/14          validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [13]
                0.00    0.00       4/23          std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
-----------------------------------------------
                0.00    0.00       1/4           supplier_corner() [101]
                0.00    0.00       1/4           supplier::register_supplier() [130]
                0.00    0.00       1/4           supplier_file_to_list() [106]
                0.00    0.00       1/4           Admin::Admin() [120]
[37]     0.0    0.00    0.00       4         supplier::supplier() [37]
-----------------------------------------------
                0.00    0.00       1/4           supplier_corner() [101]
                0.00    0.00       1/4           supplier_file_to_list() [106]
                0.00    0.00       1/4           void __gnu_cxx::new_allocator<std::_List_node<supplier> >::destroy<supplier>(supplier*) [151]
                0.00    0.00       1/4           Admin::~Admin() [319]
[38]     0.0    0.00    0.00       4         supplier::~supplier() [38]
-----------------------------------------------
                0.00    0.00       4/4           customer::login_customer() [125]
[39]     0.0    0.00    0.00       4         std::_List_iterator<customer>::operator->() const [39]
                0.00    0.00       4/7           std::_List_node<customer>::_M_valptr() [22]
-----------------------------------------------
                0.00    0.00       4/4           supplier::login_supplier() [128]
[40]     0.0    0.00    0.00       4         std::_List_iterator<supplier>::operator->() const [40]
                0.00    0.00       4/6           std::_List_node<supplier>::_M_valptr() [32]
-----------------------------------------------
                0.00    0.00       1/4           customer::place_order() [124]
                0.00    0.00       1/4           supplier::add_product() [127]
                0.00    0.00       1/4           Admin::top_three_product() [119]
                0.00    0.00       1/4           product_list_to_file() [103]
[41]     0.0    0.00    0.00       4         std::__cxx11::list<product, std::allocator<product> >::empty() const [41]
-----------------------------------------------
                0.00    0.00       1/4           supplier::login_supplier() [128]
                0.00    0.00       1/4           supplier::register_supplier() [130]
                0.00    0.00       1/4           supplier::add_product() [127]
                0.00    0.00       1/4           supplier_list_to_file() [107]
[42]     0.0    0.00    0.00       4         std::__cxx11::list<supplier, std::allocator<supplier> >::empty() const [42]
-----------------------------------------------
                0.00    0.00       1/4           transaction::generate_bill(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, int, int) [113]
                0.00    0.00       1/4           std::__cxx11::list<transaction, std::allocator<transaction> >::push_back(transaction const&) [264]
                0.00    0.00       2/4           transaction_list_to_file() [109]
[43]     0.0    0.00    0.00       4         std::__cxx11::list<transaction, std::allocator<transaction> >::end() [43]
                0.00    0.00       4/6           std::_List_iterator<transaction>::_List_iterator(std::__detail::_List_node_base*) [33]
-----------------------------------------------
                0.00    0.00       1/4           customer::place_order() [124]
                0.00    0.00       1/4           supplier::add_product() [127]
                0.00    0.00       1/4           Admin::top_three_product() [119]
                0.00    0.00       1/4           product_list_to_file() [103]
[44]     0.0    0.00    0.00       4         std::__cxx11::list<product, std::allocator<product> >::begin() [44]
                0.00    0.00       4/11          std::_List_iterator<product>::_List_iterator(std::__detail::_List_node_base*) [18]
-----------------------------------------------
                0.00    0.00       1/4           customer::login_customer() [125]
                0.00    0.00       1/4           customer::register_customer() [126]
                0.00    0.00       1/4           customer_list_to_file() [105]
                0.00    0.00       1/4           std::__cxx11::list<customer, std::allocator<customer> >::push_back(customer const&) [274]
[45]     0.0    0.00    0.00       4         std::__cxx11::list<customer, std::allocator<customer> >::end() [45]
                0.00    0.00       4/7           std::_List_iterator<customer>::_List_iterator(std::__detail::_List_node_base*) [23]
-----------------------------------------------
                0.00    0.00       4/4           std::__detail::_List_node_header::_List_node_header() [47]
[46]     0.0    0.00    0.00       4         std::__detail::_List_node_header::_M_init() [46]
-----------------------------------------------
                0.00    0.00       1/4           std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::_List_impl() [238]
                0.00    0.00       1/4           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::_List_impl() [254]
                0.00    0.00       1/4           std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::_List_impl() [246]
                0.00    0.00       1/4           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::_List_impl() [230]
[47]     0.0    0.00    0.00       4         std::__detail::_List_node_header::_List_node_header() [47]
                0.00    0.00       4/4           std::__detail::_List_node_header::_M_init() [46]
-----------------------------------------------
                0.00    0.00       1/4           void std::__cxx11::list<transaction, std::allocator<transaction> >::_M_insert<transaction const&>(std::_List_iterator<transaction>, transaction const&) [263]
                0.00    0.00       1/4           std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
                0.00    0.00       1/4           void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::construct<transaction, transaction const&>(std::allocator<std::_List_node<transaction> >&, transaction*, transaction const&) [205]
                0.00    0.00       1/4           void __gnu_cxx::new_allocator<std::_List_node<transaction> >::construct<transaction, transaction const&>(transaction*, transaction const&) [135]
[48]     0.0    0.00    0.00       4         transaction const& std::forward<transaction const&>(std::remove_reference<transaction const&>::type&) [48]
-----------------------------------------------
                0.00    0.00       1/4           void std::__cxx11::list<product, std::allocator<product> >::_M_insert<product const&>(std::_List_iterator<product>, product const&) [269]
                0.00    0.00       1/4           std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
                0.00    0.00       1/4           void std::allocator_traits<std::allocator<std::_List_node<product> > >::construct<product, product const&>(std::allocator<std::_List_node<product> >&, product*, product const&) [209]
                0.00    0.00       1/4           void __gnu_cxx::new_allocator<std::_List_node<product> >::construct<product, product const&>(product*, product const&) [141]
[49]     0.0    0.00    0.00       4         product const& std::forward<product const&>(std::remove_reference<product const&>::type&) [49]
-----------------------------------------------
                0.00    0.00       1/4           void std::__cxx11::list<customer, std::allocator<customer> >::_M_insert<customer const&>(std::_List_iterator<customer>, customer const&) [273]
                0.00    0.00       1/4           std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
                0.00    0.00       1/4           void std::allocator_traits<std::allocator<std::_List_node<customer> > >::construct<customer, customer const&>(std::allocator<std::_List_node<customer> >&, customer*, customer const&) [213]
                0.00    0.00       1/4           void __gnu_cxx::new_allocator<std::_List_node<customer> >::construct<customer, customer const&>(customer*, customer const&) [147]
[50]     0.0    0.00    0.00       4         customer const& std::forward<customer const&>(std::remove_reference<customer const&>::type&) [50]
-----------------------------------------------
                0.00    0.00       1/4           void std::__cxx11::list<supplier, std::allocator<supplier> >::_M_insert<supplier const&>(std::_List_iterator<supplier>, supplier const&) [277]
                0.00    0.00       1/4           std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
                0.00    0.00       1/4           void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::construct<supplier, supplier const&>(std::allocator<std::_List_node<supplier> >&, supplier*, supplier const&) [217]
                0.00    0.00       1/4           void __gnu_cxx::new_allocator<std::_List_node<supplier> >::construct<supplier, supplier const&>(supplier*, supplier const&) [153]
[51]     0.0    0.00    0.00       4         supplier const& std::forward<supplier const&>(std::remove_reference<supplier const&>::type&) [51]
-----------------------------------------------
                0.00    0.00       1/4           customer::login_customer() [125]
                0.00    0.00       1/4           customer::register_customer() [126]
                0.00    0.00       2/4           customer_list_to_file() [105]
[52]     0.0    0.00    0.00       4         std::operator!=(std::_List_iterator<customer> const&, std::_List_iterator<customer> const&) [52]
-----------------------------------------------
                0.00    0.00       1/4           supplier::login_supplier() [128]
                0.00    0.00       1/4           supplier::register_supplier() [130]
                0.00    0.00       2/4           supplier_list_to_file() [107]
[53]     0.0    0.00    0.00       4         std::operator!=(std::_List_iterator<supplier> const&, std::_List_iterator<supplier> const&) [53]
-----------------------------------------------
                0.00    0.00       1/4           void __gnu_cxx::new_allocator<std::_List_node<customer> >::construct<customer, customer const&>(customer*, customer const&) [147]
                0.00    0.00       1/4           void __gnu_cxx::new_allocator<std::_List_node<transaction> >::construct<transaction, transaction const&>(transaction*, transaction const&) [135]
                0.00    0.00       1/4           void __gnu_cxx::new_allocator<std::_List_node<supplier> >::construct<supplier, supplier const&>(supplier*, supplier const&) [153]
                0.00    0.00       1/4           void __gnu_cxx::new_allocator<std::_List_node<product> >::construct<product, product const&>(product*, product const&) [141]
[54]     0.0    0.00    0.00       4         operator new(unsigned long, void*) [54]
-----------------------------------------------
                0.00    0.00       1/3           supplier::add_product() [127]
                0.00    0.00       1/3           product_file_to_list() [102]
                0.00    0.00       1/3           void __gnu_cxx::new_allocator<std::_List_node<product> >::destroy<product>(product*) [139]
[55]     0.0    0.00    0.00       3         product::~product() [55]
-----------------------------------------------
                0.00    0.00       1/3           transaction::generate_bill(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, int, int) [113]
                0.00    0.00       1/3           Admin::top_three_product() [119]
                0.00    0.00       1/3           transaction_file_to_list() [108]
[56]     0.0    0.00    0.00       3         std::__cxx11::list<transaction, std::allocator<transaction> >::empty() const [56]
-----------------------------------------------
                0.00    0.00       1/3           customer::login_customer() [125]
                0.00    0.00       1/3           customer::register_customer() [126]
                0.00    0.00       1/3           customer_list_to_file() [105]
[57]     0.0    0.00    0.00       3         std::__cxx11::list<customer, std::allocator<customer> >::empty() const [57]
-----------------------------------------------
                0.00    0.00       1/3           customer::login_customer() [125]
                0.00    0.00       1/3           customer::register_customer() [126]
                0.00    0.00       1/3           customer_list_to_file() [105]
[58]     0.0    0.00    0.00       3         std::__cxx11::list<customer, std::allocator<customer> >::begin() [58]
                0.00    0.00       3/7           std::_List_iterator<customer>::_List_iterator(std::__detail::_List_node_base*) [23]
-----------------------------------------------
                0.00    0.00       1/3           supplier::login_supplier() [128]
                0.00    0.00       1/3           supplier::register_supplier() [130]
                0.00    0.00       1/3           supplier_list_to_file() [107]
[59]     0.0    0.00    0.00       3         std::__cxx11::list<supplier, std::allocator<supplier> >::begin() [59]
                0.00    0.00       3/8           std::_List_iterator<supplier>::_List_iterator(std::__detail::_List_node_base*) [19]
-----------------------------------------------
                0.00    0.00       1/3           transaction::generate_bill(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, int, int) [113]
                0.00    0.00       2/3           transaction_list_to_file() [109]
[60]     0.0    0.00    0.00       3         std::operator!=(std::_List_iterator<transaction> const&, std::_List_iterator<transaction> const&) [60]
-----------------------------------------------
                0.00    0.00       2/2           main [6]
[61]     0.0    0.00    0.00       2         admin_corner() [61]
                0.00    0.00       2/23          std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
                0.00    0.00       1/1           Admin::top_three_product() [119]
-----------------------------------------------
                0.00    0.00       1/2           __gthread_mutex_lock(pthread_mutex_t*) [111]
                0.00    0.00       1/2           __gthread_mutex_unlock(pthread_mutex_t*) [112]
[62]     0.0    0.00    0.00       2         __gthread_active_p() [62]
-----------------------------------------------
                0.00    0.00       1/2           customer::place_order() [124]
                0.00    0.00       1/2           void __gnu_cxx::new_allocator<std::_List_node<transaction> >::destroy<transaction>(transaction*) [133]
[63]     0.0    0.00    0.00       2         transaction::~transaction() [63]
-----------------------------------------------
                0.00    0.00       1/2           customer::register_customer() [126]
                0.00    0.00       1/2           supplier::register_supplier() [130]
[64]     0.0    0.00    0.00       2         validations::check_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [64]
-----------------------------------------------
                0.00    0.00       2/2           supplier::add_product() [127]
[65]     0.0    0.00    0.00       2         validations::check_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [65]
-----------------------------------------------
                0.00    0.00       1/2           customer::register_customer() [126]
                0.00    0.00       1/2           supplier::register_supplier() [130]
[66]     0.0    0.00    0.00       2         validations::check_address(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [66]
-----------------------------------------------
                0.00    0.00       1/2           customer::place_order() [124]
                0.00    0.00       1/2           Admin::top_three_product() [119]
[67]     0.0    0.00    0.00       2         product::get_product_id() [67]
-----------------------------------------------
                0.00    0.00       2/2           Admin::top_three_product() [119]
[68]     0.0    0.00    0.00       2         product::get_units_sold() [68]
-----------------------------------------------
                0.00    0.00       2/2           customer::place_order() [124]
[69]     0.0    0.00    0.00       2         product::get_no_of_units() [69]
-----------------------------------------------
                0.00    0.00       1/2           customer::place_order() [124]
                0.00    0.00       1/2           Admin::top_three_product() [119]
[70]     0.0    0.00    0.00       2         product::get_product_name[abi:cxx11]() [70]
-----------------------------------------------
                0.00    0.00       1/2           customer::place_order() [124]
                0.00    0.00       1/2           Admin::top_three_product() [119]
[71]     0.0    0.00    0.00       2         product::get_cost() [71]
-----------------------------------------------
                0.00    0.00       1/2           supplier::add_product() [127]
                0.00    0.00       1/2           product_file_to_list() [102]
[72]     0.0    0.00    0.00       2         product::product() [72]
-----------------------------------------------
                0.00    0.00       2/2           customer::login_customer() [125]
[73]     0.0    0.00    0.00       2         customer::get_customer_id() [73]
-----------------------------------------------
                0.00    0.00       2/2           customer::login_customer() [125]
[74]     0.0    0.00    0.00       2         customer::get_customer_name[abi:cxx11]() [74]
-----------------------------------------------
                0.00    0.00       1/2           customer_list_to_file() [105]
                0.00    0.00       1/2           void __gnu_cxx::new_allocator<std::_List_node<customer> >::construct<customer, customer const&>(customer*, customer const&) [147]
[75]     0.0    0.00    0.00       2         customer::customer(customer const&) [75]
-----------------------------------------------
                0.00    0.00       2/2           supplier::login_supplier() [128]
[76]     0.0    0.00    0.00       2         supplier::get_supplier_name[abi:cxx11]() [76]
-----------------------------------------------
                0.00    0.00       2/2           std::_List_node<transaction>::_M_valptr() [81]
[77]     0.0    0.00    0.00       2         __gnu_cxx::__aligned_membuf<transaction>::_M_ptr() [77]
                0.00    0.00       2/2           __gnu_cxx::__aligned_membuf<transaction>::_M_addr() [78]
-----------------------------------------------
                0.00    0.00       2/2           __gnu_cxx::__aligned_membuf<transaction>::_M_ptr() [77]
[78]     0.0    0.00    0.00       2         __gnu_cxx::__aligned_membuf<transaction>::_M_addr() [78]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::stol(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [91]
[79]     0.0    0.00    0.00       2         long __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [79]
                0.00    0.00       2/2           __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno() [97]
                0.00    0.00       2/2           __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, false>) [96]
                0.00    0.00       2/2           __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() [98]
-----------------------------------------------
                0.00    0.00       2/2           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [82]
[80]     0.0    0.00    0.00       2         std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&) [80]
-----------------------------------------------
                0.00    0.00       1/2           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_clear() [235]
                0.00    0.00       1/2           std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
[81]     0.0    0.00    0.00       2         std::_List_node<transaction>::_M_valptr() [81]
                0.00    0.00       2/2           __gnu_cxx::__aligned_membuf<transaction>::_M_ptr() [77]
-----------------------------------------------
                0.00    0.00       2/2           std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [92]
[82]     0.0    0.00    0.00       2         std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [82]
                0.00    0.00       2/2           std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&) [80]
-----------------------------------------------
                0.00    0.00       1/2           Admin::top_three_product() [119]
                0.00    0.00       1/2           product_list_to_file() [103]
[83]     0.0    0.00    0.00       2         std::_List_iterator<product>::operator++(int) [83]
-----------------------------------------------
                0.00    0.00       1/2           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [178]
                0.00    0.00       1/2           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [201]
[84]     0.0    0.00    0.00       2         std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [84]
                0.00    0.00       2/2           std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) [93]
-----------------------------------------------
                0.00    0.00       1/2           std::thread::joinable() const [162]
                0.00    0.00       1/2           std::thread::thread<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [228]
[85]     0.0    0.00    0.00       2         std::thread::id::id() [85]
-----------------------------------------------
                0.00    0.00       1/2           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_clear() [235]
                0.00    0.00       1/2           std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
[86]     0.0    0.00    0.00       2         std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_Node_allocator() [86]
-----------------------------------------------
                0.00    0.00       1/2           std::__cxx11::_List_base<product, std::allocator<product> >::_M_clear() [243]
                0.00    0.00       1/2           std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
[87]     0.0    0.00    0.00       2         std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_Node_allocator() [87]
-----------------------------------------------
                0.00    0.00       1/2           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_clear() [251]
                0.00    0.00       1/2           std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
[88]     0.0    0.00    0.00       2         std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_Node_allocator() [88]
-----------------------------------------------
                0.00    0.00       1/2           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_clear() [259]
                0.00    0.00       1/2           std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
[89]     0.0    0.00    0.00       2         std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_Node_allocator() [89]
-----------------------------------------------
                0.00    0.00       1/2           transaction::generate_bill(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, int, int) [113]
                0.00    0.00       1/2           transaction_list_to_file() [109]
[90]     0.0    0.00    0.00       2         std::__cxx11::list<transaction, std::allocator<transaction> >::begin() [90]
                0.00    0.00       2/6           std::_List_iterator<transaction>::_List_iterator(std::__detail::_List_node_base*) [33]
-----------------------------------------------
                0.00    0.00       1/2           customer::register_customer() [126]
                0.00    0.00       1/2           supplier::register_supplier() [130]
[91]     0.0    0.00    0.00       2         std::__cxx11::stol(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [91]
                0.00    0.00       2/2           long __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [79]
-----------------------------------------------
                0.00    0.00       2/2           std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) [93]
[92]     0.0    0.00    0.00       2         std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [92]
                0.00    0.00       2/2           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [82]
-----------------------------------------------
                0.00    0.00       2/2           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [84]
[93]     0.0    0.00    0.00       2         std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&) [93]
                0.00    0.00       2/2           std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [92]
-----------------------------------------------
                0.00    0.00       2/2           int std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [226]
[94]     0.0    0.00    0.00       2         std::remove_reference<std::tuple<int (customer::*)(), customer*>&>::type&& std::move<std::tuple<int (customer::*)(), customer*>&>(std::tuple<int (customer::*)(), customer*>&) [94]
-----------------------------------------------
                0.00    0.00       1/2           std::__invoke_result<int (customer::*)(), customer*>::type std::__invoke<int (customer::*)(), customer*>(int (customer::*&&)(), customer*&&) [297]
                0.00    0.00       1/2           int std::__invoke_impl<int, int (customer::*)(), customer*>(std::__invoke_memfun_deref, int (customer::*&&)(), customer*&&) [289]
[95]     0.0    0.00    0.00       2         customer*&& std::forward<customer*>(std::remove_reference<customer*>::type&) [95]
-----------------------------------------------
                0.00    0.00       2/2           long __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [79]
[96]     0.0    0.00    0.00       2         __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, false>) [96]
-----------------------------------------------
                0.00    0.00       2/2           long __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [79]
[97]     0.0    0.00    0.00       2         __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno() [97]
-----------------------------------------------
                0.00    0.00       2/2           long __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [79]
[98]     0.0    0.00    0.00       2         __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() [98]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [403]
[99]     0.0    0.00    0.00       1         _GLOBAL__sub_I_ad [99]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [110]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[100]    0.0    0.00    0.00       1         customer_corner() [100]
                0.00    0.00       3/23          std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
                0.00    0.00       1/6           customer::customer() [28]
                0.00    0.00       1/1           customer::register_customer() [126]
                0.00    0.00       1/1           customer::login_customer() [125]
                0.00    0.00       1/6           customer::~customer() [29]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[101]    0.0    0.00    0.00       1         supplier_corner() [101]
                0.00    0.00       3/23          std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
                0.00    0.00       1/4           supplier::supplier() [37]
                0.00    0.00       1/1           supplier::register_supplier() [130]
                0.00    0.00       1/1           supplier::login_supplier() [128]
                0.00    0.00       1/4           supplier::~supplier() [38]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[102]    0.0    0.00    0.00       1         product_file_to_list() [102]
                0.00    0.00       1/2           product::product() [72]
                0.00    0.00       1/7           std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [27]
                0.00    0.00       1/3           product::~product() [55]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[103]    0.0    0.00    0.00       1         product_list_to_file() [103]
                0.00    0.00       2/7           std::__cxx11::list<product, std::allocator<product> >::end() [24]
                0.00    0.00       2/6           std::operator!=(std::_List_iterator<product> const&, std::_List_iterator<product> const&) [34]
                0.00    0.00       1/4           std::__cxx11::list<product, std::allocator<product> >::empty() const [41]
                0.00    0.00       1/7           std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [27]
                0.00    0.00       1/4           std::__cxx11::list<product, std::allocator<product> >::begin() [44]
                0.00    0.00       1/2           std::_List_iterator<product>::operator++(int) [83]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[104]    0.0    0.00    0.00       1         customer_file_to_list() [104]
                0.00    0.00       1/6           customer::customer() [28]
                0.00    0.00       1/7           std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [27]
                0.00    0.00       1/6           customer::~customer() [29]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[105]    0.0    0.00    0.00       1         customer_list_to_file() [105]
                0.00    0.00       2/4           std::operator!=(std::_List_iterator<customer> const&, std::_List_iterator<customer> const&) [52]
                0.00    0.00       1/3           std::__cxx11::list<customer, std::allocator<customer> >::empty() const [57]
                0.00    0.00       1/7           std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [27]
                0.00    0.00       1/3           std::__cxx11::list<customer, std::allocator<customer> >::begin() [58]
                0.00    0.00       1/4           std::__cxx11::list<customer, std::allocator<customer> >::end() [45]
                0.00    0.00       1/1           std::_List_iterator<customer>::operator*() const [160]
                0.00    0.00       1/2           customer::customer(customer const&) [75]
                0.00    0.00       1/6           customer::~customer() [29]
                0.00    0.00       1/1           std::_List_iterator<customer>::operator++() [186]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[106]    0.0    0.00    0.00       1         supplier_file_to_list() [106]
                0.00    0.00       1/4           supplier::supplier() [37]
                0.00    0.00       1/7           std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [27]
                0.00    0.00       1/4           supplier::~supplier() [38]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[107]    0.0    0.00    0.00       1         supplier_list_to_file() [107]
                0.00    0.00       2/5           std::__cxx11::list<supplier, std::allocator<supplier> >::end() [35]
                0.00    0.00       2/4           std::operator!=(std::_List_iterator<supplier> const&, std::_List_iterator<supplier> const&) [53]
                0.00    0.00       1/4           std::__cxx11::list<supplier, std::allocator<supplier> >::empty() const [42]
                0.00    0.00       1/7           std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [27]
                0.00    0.00       1/3           std::__cxx11::list<supplier, std::allocator<supplier> >::begin() [59]
                0.00    0.00       1/1           std::_List_iterator<supplier>::operator++(int) [187]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[108]    0.0    0.00    0.00       1         transaction_file_to_list() [108]
                0.00    0.00       1/3           std::__cxx11::list<transaction, std::allocator<transaction> >::empty() const [56]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[109]    0.0    0.00    0.00       1         transaction_list_to_file() [109]
                0.00    0.00       2/4           std::__cxx11::list<transaction, std::allocator<transaction> >::end() [43]
                0.00    0.00       2/3           std::operator!=(std::_List_iterator<transaction> const&, std::_List_iterator<transaction> const&) [60]
                0.00    0.00       1/7           std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) [27]
                0.00    0.00       1/2           std::__cxx11::list<transaction, std::allocator<transaction> >::begin() [90]
                0.00    0.00       1/1           std::_List_iterator<transaction>::operator++(int) [185]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I_ad [99]
[110]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [110]
                0.00    0.00       1/1           Admin::Admin() [120]
                0.00    0.00       1/1           std::__cxx11::list<product, std::allocator<product> >::list() [271]
                0.00    0.00       1/1           std::__cxx11::list<supplier, std::allocator<supplier> >::list() [279]
                0.00    0.00       1/1           std::__cxx11::list<customer, std::allocator<customer> >::list() [275]
                0.00    0.00       1/1           std::__cxx11::list<transaction, std::allocator<transaction> >::list() [265]
-----------------------------------------------
                0.00    0.00       1/1           std::mutex::lock() [218]
[111]    0.0    0.00    0.00       1         __gthread_mutex_lock(pthread_mutex_t*) [111]
                0.00    0.00       1/2           __gthread_active_p() [62]
-----------------------------------------------
                0.00    0.00       1/1           std::mutex::unlock() [219]
[112]    0.0    0.00    0.00       1         __gthread_mutex_unlock(pthread_mutex_t*) [112]
                0.00    0.00       1/2           __gthread_active_p() [62]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[113]    0.0    0.00    0.00       1         transaction::generate_bill(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, int, int) [113]
                0.00    0.00       1/3           std::__cxx11::list<transaction, std::allocator<transaction> >::empty() const [56]
                0.00    0.00       1/2           std::__cxx11::list<transaction, std::allocator<transaction> >::begin() [90]
                0.00    0.00       1/4           std::__cxx11::list<transaction, std::allocator<transaction> >::end() [43]
                0.00    0.00       1/3           std::operator!=(std::_List_iterator<transaction> const&, std::_List_iterator<transaction> const&) [60]
-----------------------------------------------
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<transaction> >::construct<transaction, transaction const&>(transaction*, transaction const&) [135]
[114]    0.0    0.00    0.00       1         transaction::transaction(transaction const&) [114]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[115]    0.0    0.00    0.00       1         transaction::transaction() [115]
-----------------------------------------------
                0.00    0.00       1/1           main [6]
[116]    0.0    0.00    0.00       1         validations::password_check() [116]
-----------------------------------------------
                0.00    0.00       1/1           customer::login_customer() [125]
[117]    0.0    0.00    0.00       1         validations::take_customer_id() [117]
                0.00    0.00       1/14          validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [13]
                0.00    0.00       1/23          std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
-----------------------------------------------
                0.00    0.00       1/1           supplier::login_supplier() [128]
[118]    0.0    0.00    0.00       1         validations::take_supplier_id() [118]
                0.00    0.00       1/14          validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [13]
                0.00    0.00       1/23          std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
-----------------------------------------------
                0.00    0.00       1/1           admin_corner() [61]
[119]    0.0    0.00    0.00       1         Admin::top_three_product() [119]
                0.00    0.00       5/12          std::_List_iterator<product>::operator->() const [17]
                0.00    0.00       2/7           std::__cxx11::list<product, std::allocator<product> >::end() [24]
                0.00    0.00       2/6           std::operator!=(std::_List_iterator<product> const&, std::_List_iterator<product> const&) [34]
                0.00    0.00       2/2           product::get_units_sold() [68]
                0.00    0.00       1/4           std::__cxx11::list<product, std::allocator<product> >::empty() const [41]
                0.00    0.00       1/3           std::__cxx11::list<transaction, std::allocator<transaction> >::empty() const [56]
                0.00    0.00       1/4           std::__cxx11::list<product, std::allocator<product> >::begin() [44]
                0.00    0.00       1/1           void std::__cxx11::list<product, std::allocator<product> >::sort<Admin::top_three_product()::{lambda(product&, product&)#1}>(Admin::top_three_product()::{lambda(product&, product&)#1}) [268]
                0.00    0.00       1/2           product::get_product_id() [67]
                0.00    0.00       1/2           product::get_product_name[abi:cxx11]() [70]
                0.00    0.00       1/2           product::get_cost() [71]
                0.00    0.00       1/2           std::_List_iterator<product>::operator++(int) [83]
                0.00    0.00       1/1           void std::__cxx11::list<product, std::allocator<product> >::sort<Admin::top_three_product()::{lambda(product&, product&)#2}>(Admin::top_three_product()::{lambda(product&, product&)#2}) [267]
-----------------------------------------------
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [110]
[120]    0.0    0.00    0.00       1         Admin::Admin() [120]
                0.00    0.00       1/6           customer::customer() [28]
                0.00    0.00       1/4           supplier::supplier() [37]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[121]    0.0    0.00    0.00       1         product::set_units_sold(int) [121]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[122]    0.0    0.00    0.00       1         product::set_no_of_units(int) [122]
-----------------------------------------------
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<product> >::construct<product, product const&>(product*, product const&) [141]
[123]    0.0    0.00    0.00       1         product::product(product const&) [123]
-----------------------------------------------
                0.00    0.00       1/1           int std::__invoke_impl<int, int (customer::*)(), customer*>(std::__invoke_memfun_deref, int (customer::*&&)(), customer*&&) [289]
[124]    0.0    0.00    0.00       1         customer::place_order() [124]
                0.00    0.00       7/12          std::_List_iterator<product>::operator->() const [17]
                0.00    0.00       3/14          validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [13]
                0.00    0.00       3/23          std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
                0.00    0.00       2/2           product::get_no_of_units() [69]
                0.00    0.00       1/4           std::__cxx11::list<product, std::allocator<product> >::empty() const [41]
                0.00    0.00       1/4           std::__cxx11::list<product, std::allocator<product> >::begin() [44]
                0.00    0.00       1/7           std::__cxx11::list<product, std::allocator<product> >::end() [24]
                0.00    0.00       1/6           std::operator!=(std::_List_iterator<product> const&, std::_List_iterator<product> const&) [34]
                0.00    0.00       1/2           product::get_product_id() [67]
                0.00    0.00       1/2           product::get_product_name[abi:cxx11]() [70]
                0.00    0.00       1/2           product::get_cost() [71]
                0.00    0.00       1/1           std::mutex::lock() [218]
                0.00    0.00       1/1           product::set_no_of_units(int) [122]
                0.00    0.00       1/1           product::set_units_sold(int) [121]
                0.00    0.00       1/1           std::__cxx11::to_string(int) [280]
                0.00    0.00       1/1           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [300]
                0.00    0.00       1/1           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [299]
                0.00    0.00       1/1           std::mutex::unlock() [219]
                0.00    0.00       1/1           transaction::transaction() [115]
                0.00    0.00       1/1           transaction::generate_bill(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, int, int) [113]
                0.00    0.00       1/1           std::__cxx11::list<transaction, std::allocator<transaction> >::push_back(transaction const&) [264]
                0.00    0.00       1/2           transaction::~transaction() [63]
-----------------------------------------------
                0.00    0.00       1/1           customer_corner() [100]
[125]    0.0    0.00    0.00       1         customer::login_customer() [125]
                0.00    0.00       4/4           std::_List_iterator<customer>::operator->() const [39]
                0.00    0.00       2/2           customer::get_customer_id() [73]
                0.00    0.00       2/2           customer::get_customer_name[abi:cxx11]() [74]
                0.00    0.00       2/4           validations::take_choice() [36]
                0.00    0.00       2/6           customer::customer() [28]
                0.00    0.00       1/3           std::__cxx11::list<customer, std::allocator<customer> >::empty() const [57]
                0.00    0.00       1/1           validations::take_customer_id() [117]
                0.00    0.00       1/3           std::__cxx11::list<customer, std::allocator<customer> >::begin() [58]
                0.00    0.00       1/4           std::__cxx11::list<customer, std::allocator<customer> >::end() [45]
                0.00    0.00       1/4           std::operator!=(std::_List_iterator<customer> const&, std::_List_iterator<customer> const&) [52]
                0.00    0.00       1/1           std::thread::thread<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [228]
                0.00    0.00       1/1           std::thread::~thread() [229]
-----------------------------------------------
                0.00    0.00       1/1           customer_corner() [100]
[126]    0.0    0.00    0.00       1         customer::register_customer() [126]
                0.00    0.00       1/3           std::__cxx11::list<customer, std::allocator<customer> >::empty() const [57]
                0.00    0.00       1/3           std::__cxx11::list<customer, std::allocator<customer> >::begin() [58]
                0.00    0.00       1/4           std::__cxx11::list<customer, std::allocator<customer> >::end() [45]
                0.00    0.00       1/4           std::operator!=(std::_List_iterator<customer> const&, std::_List_iterator<customer> const&) [52]
                0.00    0.00       1/6           customer::customer() [28]
                0.00    0.00       1/2           validations::check_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [64]
                0.00    0.00       1/2           validations::check_address(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [66]
                0.00    0.00       1/14          validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [13]
                0.00    0.00       1/2           std::__cxx11::stol(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [91]
                0.00    0.00       1/1           std::__cxx11::list<customer, std::allocator<customer> >::push_back(customer const&) [274]
                0.00    0.00       1/6           customer::~customer() [29]
-----------------------------------------------
                0.00    0.00       1/1           supplier::login_supplier() [128]
[127]    0.0    0.00    0.00       1         supplier::add_product() [127]
                0.00    0.00       2/2           validations::check_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [65]
                0.00    0.00       2/14          validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [13]
                0.00    0.00       2/23          std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [9]
                0.00    0.00       1/4           std::__cxx11::list<product, std::allocator<product> >::empty() const [41]
                0.00    0.00       1/4           std::__cxx11::list<product, std::allocator<product> >::begin() [44]
                0.00    0.00       1/7           std::__cxx11::list<product, std::allocator<product> >::end() [24]
                0.00    0.00       1/6           std::operator!=(std::_List_iterator<product> const&, std::_List_iterator<product> const&) [34]
                0.00    0.00       1/4           std::__cxx11::list<supplier, std::allocator<supplier> >::empty() const [42]
                0.00    0.00       1/2           product::product() [72]
                0.00    0.00       1/1           std::__cxx11::list<product, std::allocator<product> >::push_back(product const&) [270]
                0.00    0.00       1/3           product::~product() [55]
-----------------------------------------------
                0.00    0.00       1/1           supplier_corner() [101]
[128]    0.0    0.00    0.00       1         supplier::login_supplier() [128]
                0.00    0.00       4/4           std::_List_iterator<supplier>::operator->() const [40]
                0.00    0.00       2/2           supplier::get_supplier_name[abi:cxx11]() [76]
                0.00    0.00       2/4           validations::take_choice() [36]
                0.00    0.00       1/4           std::__cxx11::list<supplier, std::allocator<supplier> >::empty() const [42]
                0.00    0.00       1/1           validations::take_supplier_id() [118]
                0.00    0.00       1/3           std::__cxx11::list<supplier, std::allocator<supplier> >::begin() [59]
                0.00    0.00       1/5           std::__cxx11::list<supplier, std::allocator<supplier> >::end() [35]
                0.00    0.00       1/4           std::operator!=(std::_List_iterator<supplier> const&, std::_List_iterator<supplier> const&) [53]
                0.00    0.00       1/1           supplier::get_supplier_id() [129]
                0.00    0.00       1/1           supplier::add_product() [127]
-----------------------------------------------
                0.00    0.00       1/1           supplier::login_supplier() [128]
[129]    0.0    0.00    0.00       1         supplier::get_supplier_id() [129]
-----------------------------------------------
                0.00    0.00       1/1           supplier_corner() [101]
[130]    0.0    0.00    0.00       1         supplier::register_supplier() [130]
                0.00    0.00       2/14          validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [13]
                0.00    0.00       1/4           std::__cxx11::list<supplier, std::allocator<supplier> >::empty() const [42]
                0.00    0.00       1/3           std::__cxx11::list<supplier, std::allocator<supplier> >::begin() [59]
                0.00    0.00       1/5           std::__cxx11::list<supplier, std::allocator<supplier> >::end() [35]
                0.00    0.00       1/4           std::operator!=(std::_List_iterator<supplier> const&, std::_List_iterator<supplier> const&) [53]
                0.00    0.00       1/4           supplier::supplier() [37]
                0.00    0.00       1/2           validations::check_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [64]
                0.00    0.00       1/2           validations::check_address(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [66]
                0.00    0.00       1/2           std::__cxx11::stol(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [91]
                0.00    0.00       1/1           std::__cxx11::list<supplier, std::allocator<supplier> >::push_back(supplier const&) [278]
-----------------------------------------------
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<supplier> >::construct<supplier, supplier const&>(supplier*, supplier const&) [153]
[131]    0.0    0.00    0.00       1         supplier::supplier(supplier const&) [131]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<transaction> > >::deallocate(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*, unsigned long) [202]
[132]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<transaction> >::deallocate(std::_List_node<transaction>*, unsigned long) [132]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::destroy<transaction>(std::allocator<std::_List_node<transaction> >&, transaction*) [203]
[133]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::_List_node<transaction> >::destroy<transaction>(transaction*) [133]
                0.00    0.00       1/2           transaction::~transaction() [63]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<transaction> > >::allocate(std::allocator<std::_List_node<transaction> >&, unsigned long) [204]
[134]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<transaction> >::allocate(unsigned long, void const*) [134]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<transaction> >::_M_max_size() const [156]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::construct<transaction, transaction const&>(std::allocator<std::_List_node<transaction> >&, transaction*, transaction const&) [205]
[135]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::_List_node<transaction> >::construct<transaction, transaction const&>(transaction*, transaction const&) [135]
                0.00    0.00       1/4           transaction const& std::forward<transaction const&>(std::remove_reference<transaction const&>::type&) [48]
                0.00    0.00       1/4           operator new(unsigned long, void*) [54]
                0.00    0.00       1/1           transaction::transaction(transaction const&) [114]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::_List_node<transaction> >::allocator() [163]
[136]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<transaction> >::new_allocator() [136]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::_List_node<transaction> >::~allocator() [164]
[137]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<transaction> >::~new_allocator() [137]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<product> > >::deallocate(std::allocator<std::_List_node<product> >&, std::_List_node<product>*, unsigned long) [206]
[138]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<product> >::deallocate(std::_List_node<product>*, unsigned long) [138]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<product> > >::destroy<product>(std::allocator<std::_List_node<product> >&, product*) [207]
[139]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::_List_node<product> >::destroy<product>(product*) [139]
                0.00    0.00       1/3           product::~product() [55]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<product> > >::allocate(std::allocator<std::_List_node<product> >&, unsigned long) [208]
[140]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<product> >::allocate(unsigned long, void const*) [140]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<product> >::_M_max_size() const [157]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<product> > >::construct<product, product const&>(std::allocator<std::_List_node<product> >&, product*, product const&) [209]
[141]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::_List_node<product> >::construct<product, product const&>(product*, product const&) [141]
                0.00    0.00       1/4           product const& std::forward<product const&>(std::remove_reference<product const&>::type&) [49]
                0.00    0.00       1/4           operator new(unsigned long, void*) [54]
                0.00    0.00       1/1           product::product(product const&) [123]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::_List_node<product> >::allocator() [165]
[142]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<product> >::new_allocator() [142]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::_List_node<product> >::~allocator() [166]
[143]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<product> >::~new_allocator() [143]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<customer> > >::deallocate(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*, unsigned long) [210]
[144]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<customer> >::deallocate(std::_List_node<customer>*, unsigned long) [144]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<customer> > >::destroy<customer>(std::allocator<std::_List_node<customer> >&, customer*) [211]
[145]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::_List_node<customer> >::destroy<customer>(customer*) [145]
                0.00    0.00       1/6           customer::~customer() [29]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<customer> > >::allocate(std::allocator<std::_List_node<customer> >&, unsigned long) [212]
[146]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<customer> >::allocate(unsigned long, void const*) [146]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<customer> >::_M_max_size() const [158]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<customer> > >::construct<customer, customer const&>(std::allocator<std::_List_node<customer> >&, customer*, customer const&) [213]
[147]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::_List_node<customer> >::construct<customer, customer const&>(customer*, customer const&) [147]
                0.00    0.00       1/4           customer const& std::forward<customer const&>(std::remove_reference<customer const&>::type&) [50]
                0.00    0.00       1/4           operator new(unsigned long, void*) [54]
                0.00    0.00       1/2           customer::customer(customer const&) [75]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::_List_node<customer> >::allocator() [167]
[148]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<customer> >::new_allocator() [148]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::_List_node<customer> >::~allocator() [168]
[149]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<customer> >::~new_allocator() [149]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<supplier> > >::deallocate(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*, unsigned long) [214]
[150]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<supplier> >::deallocate(std::_List_node<supplier>*, unsigned long) [150]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::destroy<supplier>(std::allocator<std::_List_node<supplier> >&, supplier*) [215]
[151]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::_List_node<supplier> >::destroy<supplier>(supplier*) [151]
                0.00    0.00       1/4           supplier::~supplier() [38]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<supplier> > >::allocate(std::allocator<std::_List_node<supplier> >&, unsigned long) [216]
[152]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<supplier> >::allocate(unsigned long, void const*) [152]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<supplier> >::_M_max_size() const [159]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::construct<supplier, supplier const&>(std::allocator<std::_List_node<supplier> >&, supplier*, supplier const&) [217]
[153]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::_List_node<supplier> >::construct<supplier, supplier const&>(supplier*, supplier const&) [153]
                0.00    0.00       1/4           supplier const& std::forward<supplier const&>(std::remove_reference<supplier const&>::type&) [51]
                0.00    0.00       1/4           operator new(unsigned long, void*) [54]
                0.00    0.00       1/1           supplier::supplier(supplier const&) [131]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::_List_node<supplier> >::allocator() [169]
[154]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<supplier> >::new_allocator() [154]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::_List_node<supplier> >::~allocator() [170]
[155]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<supplier> >::~new_allocator() [155]
-----------------------------------------------
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<transaction> >::allocate(unsigned long, void const*) [134]
[156]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<transaction> >::_M_max_size() const [156]
-----------------------------------------------
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<product> >::allocate(unsigned long, void const*) [140]
[157]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<product> >::_M_max_size() const [157]
-----------------------------------------------
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<customer> >::allocate(unsigned long, void const*) [146]
[158]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<customer> >::_M_max_size() const [158]
-----------------------------------------------
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<supplier> >::allocate(unsigned long, void const*) [152]
[159]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_List_node<supplier> >::_M_max_size() const [159]
-----------------------------------------------
                0.00    0.00       1/1           customer_list_to_file() [105]
[160]    0.0    0.00    0.00       1         std::_List_iterator<customer>::operator*() const [160]
                0.00    0.00       1/7           std::_List_node<customer>::_M_valptr() [22]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [299]
[161]    0.0    0.00    0.00       1         std::integral_constant<bool, true>::operator bool() const [161]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::~thread() [229]
[162]    0.0    0.00    0.00       1         std::thread::joinable() const [162]
                0.00    0.00       1/2           std::thread::id::id() [85]
                0.00    0.00       1/1           std::operator==(std::thread::id, std::thread::id) [298]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::_List_impl() [230]
[163]    0.0    0.00    0.00       1         std::allocator<std::_List_node<transaction> >::allocator() [163]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<transaction> >::new_allocator() [136]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::~_List_impl() [231]
[164]    0.0    0.00    0.00       1         std::allocator<std::_List_node<transaction> >::~allocator() [164]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<transaction> >::~new_allocator() [137]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::_List_impl() [238]
[165]    0.0    0.00    0.00       1         std::allocator<std::_List_node<product> >::allocator() [165]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<product> >::new_allocator() [142]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::~_List_impl() [239]
[166]    0.0    0.00    0.00       1         std::allocator<std::_List_node<product> >::~allocator() [166]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<product> >::~new_allocator() [143]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::_List_impl() [246]
[167]    0.0    0.00    0.00       1         std::allocator<std::_List_node<customer> >::allocator() [167]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<customer> >::new_allocator() [148]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::~_List_impl() [247]
[168]    0.0    0.00    0.00       1         std::allocator<std::_List_node<customer> >::~allocator() [168]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<customer> >::~new_allocator() [149]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::_List_impl() [254]
[169]    0.0    0.00    0.00       1         std::allocator<std::_List_node<supplier> >::allocator() [169]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<supplier> >::new_allocator() [154]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::~_List_impl() [255]
[170]    0.0    0.00    0.00       1         std::allocator<std::_List_node<supplier> >::~allocator() [170]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<supplier> >::~new_allocator() [155]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_M_head(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&) [179]
[171]    0.0    0.00    0.00       1         std::_Head_base<0ul, int (customer::*)(), false>::_M_head(std::_Head_base<0ul, int (customer::*)(), false>&) [171]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_Tuple_impl<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [180]
[172]    0.0    0.00    0.00       1         std::_Head_base<0ul, int (customer::*)(), false>::_Head_base<int (customer::*)()>(int (customer::*&&)()) [172]
                0.00    0.00       1/7           int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))() [25]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [181]
[173]    0.0    0.00    0.00       1         std::_Head_base<0ul, std::thread::_State*, false>::_Head_base() [173]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, customer*>::_M_head(std::_Tuple_impl<1ul, customer*>&) [182]
[174]    0.0    0.00    0.00       1         std::_Head_base<1ul, customer*, false>::_M_head(std::_Head_base<1ul, customer*, false>&) [174]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, customer*>::_Tuple_impl<customer*&>(customer*&) [183]
[175]    0.0    0.00    0.00       1         std::_Head_base<1ul, customer*, false>::_Head_base<customer*&>(customer*&) [175]
                0.00    0.00       1/7           customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&) [26]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl() [184]
[176]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<std::thread::_State>, true>::_Head_base() [176]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >, int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [224]
[177]    0.0    0.00    0.00       1         std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [177]
                0.00    0.00       1/1           std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*) [200]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::thread<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [228]
[178]    0.0    0.00    0.00       1         std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [178]
                0.00    0.00       1/2           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [84]
-----------------------------------------------
                0.00    0.00       1/1           int (customer::*&std::__get_helper<0ul, int (customer::*)(), customer*>(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&))() [287]
[179]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_M_head(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&) [179]
                0.00    0.00       1/1           std::_Head_base<0ul, int (customer::*)(), false>::_M_head(std::_Head_base<0ul, int (customer::*)(), false>&) [171]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple<int (customer::*)(), customer*>::tuple<int (customer::*)(), customer*&, true>(int (customer::*&&)(), customer*&) [220]
[180]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_Tuple_impl<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [180]
                0.00    0.00       1/7           customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&) [26]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, customer*>::_Tuple_impl<customer*&>(customer*&) [183]
                0.00    0.00       1/7           int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))() [25]
                0.00    0.00       1/1           std::_Head_base<0ul, int (customer::*)(), false>::_Head_base<int (customer::*)()>(int (customer::*&&)()) [172]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>() [221]
[181]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [181]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl() [184]
                0.00    0.00       1/1           std::_Head_base<0ul, std::thread::_State*, false>::_Head_base() [173]
-----------------------------------------------
                0.00    0.00       1/1           customer*& std::__get_helper<1ul, customer*>(std::_Tuple_impl<1ul, customer*>&) [288]
[182]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, customer*>::_M_head(std::_Tuple_impl<1ul, customer*>&) [182]
                0.00    0.00       1/1           std::_Head_base<1ul, customer*, false>::_M_head(std::_Head_base<1ul, customer*, false>&) [174]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_Tuple_impl<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [180]
[183]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, customer*>::_Tuple_impl<customer*&>(customer*&) [183]
                0.00    0.00       1/7           customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&) [26]
                0.00    0.00       1/1           std::_Head_base<1ul, customer*, false>::_Head_base<customer*&>(customer*&) [175]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [181]
[184]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl() [184]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<std::thread::_State>, true>::_Head_base() [176]
-----------------------------------------------
                0.00    0.00       1/1           transaction_list_to_file() [109]
[185]    0.0    0.00    0.00       1         std::_List_iterator<transaction>::operator++(int) [185]
-----------------------------------------------
                0.00    0.00       1/1           customer_list_to_file() [105]
[186]    0.0    0.00    0.00       1         std::_List_iterator<customer>::operator++() [186]
-----------------------------------------------
                0.00    0.00       1/1           supplier_list_to_file() [107]
[187]    0.0    0.00    0.00       1         std::_List_iterator<supplier>::operator++(int) [187]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
[188]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::__allocated_ptr(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*) [188]
                0.00    0.00       1/1           std::allocator<std::_List_node<transaction> >* std::__addressof<std::allocator<std::_List_node<transaction> > >(std::allocator<std::_List_node<transaction> >&) [283]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
[189]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::~__allocated_ptr() [189]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
[190]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::operator=(decltype(nullptr)) [190]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
[191]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<product> > >::__allocated_ptr(std::allocator<std::_List_node<product> >&, std::_List_node<product>*) [191]
                0.00    0.00       1/1           std::allocator<std::_List_node<product> >* std::__addressof<std::allocator<std::_List_node<product> > >(std::allocator<std::_List_node<product> >&) [284]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
[192]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<product> > >::~__allocated_ptr() [192]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
[193]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<product> > >::operator=(decltype(nullptr)) [193]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
[194]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::__allocated_ptr(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*) [194]
                0.00    0.00       1/1           std::allocator<std::_List_node<customer> >* std::__addressof<std::allocator<std::_List_node<customer> > >(std::allocator<std::_List_node<customer> >&) [285]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
[195]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::~__allocated_ptr() [195]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
[196]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::operator=(decltype(nullptr)) [196]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
[197]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::__allocated_ptr(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*) [197]
                0.00    0.00       1/1           std::allocator<std::_List_node<supplier> >* std::__addressof<std::allocator<std::_List_node<supplier> > >(std::allocator<std::_List_node<supplier> >&) [286]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
[198]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::~__allocated_ptr() [198]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
[199]    0.0    0.00    0.00       1         std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::operator=(decltype(nullptr)) [199]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [177]
[200]    0.0    0.00    0.00       1         std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*) [200]
                0.00    0.00       1/1           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [201]
-----------------------------------------------
                0.00    0.00       1/1           std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*) [200]
[201]    0.0    0.00    0.00       1         std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [201]
                0.00    0.00       1/2           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [84]
                0.00    0.00       1/1           std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>() [221]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_put_node(std::_List_node<transaction>*) [234]
[202]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_List_node<transaction> > >::deallocate(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*, unsigned long) [202]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<transaction> >::deallocate(std::_List_node<transaction>*, unsigned long) [132]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_clear() [235]
[203]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::destroy<transaction>(std::allocator<std::_List_node<transaction> >&, transaction*) [203]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<transaction> >::destroy<transaction>(transaction*) [133]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_node() [232]
[204]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_List_node<transaction> > >::allocate(std::allocator<std::_List_node<transaction> >&, unsigned long) [204]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<transaction> >::allocate(unsigned long, void const*) [134]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
[205]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::construct<transaction, transaction const&>(std::allocator<std::_List_node<transaction> >&, transaction*, transaction const&) [205]
                0.00    0.00       1/4           transaction const& std::forward<transaction const&>(std::remove_reference<transaction const&>::type&) [48]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<transaction> >::construct<transaction, transaction const&>(transaction*, transaction const&) [135]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_M_put_node(std::_List_node<product>*) [242]
[206]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_List_node<product> > >::deallocate(std::allocator<std::_List_node<product> >&, std::_List_node<product>*, unsigned long) [206]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<product> >::deallocate(std::_List_node<product>*, unsigned long) [138]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_M_clear() [243]
[207]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::_List_node<product> > >::destroy<product>(std::allocator<std::_List_node<product> >&, product*) [207]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<product> >::destroy<product>(product*) [139]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_node() [240]
[208]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_List_node<product> > >::allocate(std::allocator<std::_List_node<product> >&, unsigned long) [208]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<product> >::allocate(unsigned long, void const*) [140]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
[209]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::_List_node<product> > >::construct<product, product const&>(std::allocator<std::_List_node<product> >&, product*, product const&) [209]
                0.00    0.00       1/4           product const& std::forward<product const&>(std::remove_reference<product const&>::type&) [49]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<product> >::construct<product, product const&>(product*, product const&) [141]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_put_node(std::_List_node<customer>*) [250]
[210]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_List_node<customer> > >::deallocate(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*, unsigned long) [210]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<customer> >::deallocate(std::_List_node<customer>*, unsigned long) [144]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_clear() [251]
[211]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::_List_node<customer> > >::destroy<customer>(std::allocator<std::_List_node<customer> >&, customer*) [211]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<customer> >::destroy<customer>(customer*) [145]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_node() [248]
[212]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_List_node<customer> > >::allocate(std::allocator<std::_List_node<customer> >&, unsigned long) [212]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<customer> >::allocate(unsigned long, void const*) [146]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
[213]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::_List_node<customer> > >::construct<customer, customer const&>(std::allocator<std::_List_node<customer> >&, customer*, customer const&) [213]
                0.00    0.00       1/4           customer const& std::forward<customer const&>(std::remove_reference<customer const&>::type&) [50]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<customer> >::construct<customer, customer const&>(customer*, customer const&) [147]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_put_node(std::_List_node<supplier>*) [258]
[214]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_List_node<supplier> > >::deallocate(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*, unsigned long) [214]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<supplier> >::deallocate(std::_List_node<supplier>*, unsigned long) [150]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_clear() [259]
[215]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::destroy<supplier>(std::allocator<std::_List_node<supplier> >&, supplier*) [215]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<supplier> >::destroy<supplier>(supplier*) [151]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_node() [256]
[216]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_List_node<supplier> > >::allocate(std::allocator<std::_List_node<supplier> >&, unsigned long) [216]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_List_node<supplier> >::allocate(unsigned long, void const*) [152]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
[217]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::construct<supplier, supplier const&>(std::allocator<std::_List_node<supplier> >&, supplier*, supplier const&) [217]
                0.00    0.00       1/4           supplier const& std::forward<supplier const&>(std::remove_reference<supplier const&>::type&) [51]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::_List_node<supplier> >::construct<supplier, supplier const&>(supplier*, supplier const&) [153]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[218]    0.0    0.00    0.00       1         std::mutex::lock() [218]
                0.00    0.00       1/1           __gthread_mutex_lock(pthread_mutex_t*) [111]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[219]    0.0    0.00    0.00       1         std::mutex::unlock() [219]
                0.00    0.00       1/1           __gthread_mutex_unlock(pthread_mutex_t*) [112]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::_State_impl<int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [222]
[220]    0.0    0.00    0.00       1         std::tuple<int (customer::*)(), customer*>::tuple<int (customer::*)(), customer*&, true>(int (customer::*&&)(), customer*&) [220]
                0.00    0.00       1/7           customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&) [26]
                0.00    0.00       1/7           int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))() [25]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_Tuple_impl<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [180]
-----------------------------------------------
                0.00    0.00       1/1           std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [201]
[221]    0.0    0.00    0.00       1         std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>() [221]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [181]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >, int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [224]
[222]    0.0    0.00    0.00       1         std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::_State_impl<int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [222]
                0.00    0.00       1/1           std::thread::_State::_State() [225]
                0.00    0.00       1/7           int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))() [25]
                0.00    0.00       1/7           customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&) [26]
                0.00    0.00       1/1           std::tuple<int (customer::*)(), customer*>::tuple<int (customer::*)(), customer*&, true>(int (customer::*&&)(), customer*&) [220]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::~_State_impl() [360]
[223]    0.0    0.00    0.00       1         std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::~_State_impl() [223]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::thread<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [228]
[224]    0.0    0.00    0.00       1         std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >, int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [224]
                0.00    0.00       1/7           int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))() [25]
                0.00    0.00       1/7           customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&) [26]
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::_State_impl<int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [222]
                0.00    0.00       1/1           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [177]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::_State_impl<int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [222]
[225]    0.0    0.00    0.00       1         std::thread::_State::_State() [225]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::operator()() [227]
[226]    0.0    0.00    0.00       1         int std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [226]
                0.00    0.00       2/2           std::remove_reference<std::tuple<int (customer::*)(), customer*>&>::type&& std::move<std::tuple<int (customer::*)(), customer*>&>(std::tuple<int (customer::*)(), customer*>&) [94]
                0.00    0.00       1/1           std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&) [292]
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&) [290]
                0.00    0.00       1/1           std::__invoke_result<int (customer::*)(), customer*>::type std::__invoke<int (customer::*)(), customer*>(int (customer::*&&)(), customer*&&) [297]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::_M_run() [359]
[227]    0.0    0.00    0.00       1         std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::operator()() [227]
                0.00    0.00       1/1           int std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [226]
-----------------------------------------------
                0.00    0.00       1/1           customer::login_customer() [125]
[228]    0.0    0.00    0.00       1         std::thread::thread<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [228]
                0.00    0.00       1/2           std::thread::id::id() [85]
                0.00    0.00       1/7           customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&) [26]
                0.00    0.00       1/7           int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))() [25]
                0.00    0.00       1/1           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >, int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [224]
                0.00    0.00       1/1           std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [178]
-----------------------------------------------
                0.00    0.00       1/1           customer::login_customer() [125]
[229]    0.0    0.00    0.00       1         std::thread::~thread() [229]
                0.00    0.00       1/1           std::thread::joinable() const [162]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_base() [236]
[230]    0.0    0.00    0.00       1         std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::_List_impl() [230]
                0.00    0.00       1/1           std::allocator<std::_List_node<transaction> >::allocator() [163]
                0.00    0.00       1/4           std::__detail::_List_node_header::_List_node_header() [47]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::~_List_base() [237]
[231]    0.0    0.00    0.00       1         std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::~_List_impl() [231]
                0.00    0.00       1/1           std::allocator<std::_List_node<transaction> >::~allocator() [164]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
[232]    0.0    0.00    0.00       1         std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_node() [232]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<transaction> > >::allocate(std::allocator<std::_List_node<transaction> >&, unsigned long) [204]
-----------------------------------------------
                0.00    0.00       1/1           void std::__cxx11::list<transaction, std::allocator<transaction> >::_M_insert<transaction const&>(std::_List_iterator<transaction>, transaction const&) [263]
[233]    0.0    0.00    0.00       1         std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_inc_size(unsigned long) [233]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_clear() [235]
[234]    0.0    0.00    0.00       1         std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_put_node(std::_List_node<transaction>*) [234]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<transaction> > >::deallocate(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*, unsigned long) [202]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::~_List_base() [237]
[235]    0.0    0.00    0.00       1         std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_clear() [235]
                0.00    0.00       1/2           std::_List_node<transaction>::_M_valptr() [81]
                0.00    0.00       1/2           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_Node_allocator() [86]
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::destroy<transaction>(std::allocator<std::_List_node<transaction> >&, transaction*) [203]
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_put_node(std::_List_node<transaction>*) [234]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<transaction, std::allocator<transaction> >::list() [265]
[236]    0.0    0.00    0.00       1         std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_base() [236]
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::_List_impl() [230]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<transaction, std::allocator<transaction> >::~list() [365]
[237]    0.0    0.00    0.00       1         std::__cxx11::_List_base<transaction, std::allocator<transaction> >::~_List_base() [237]
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_clear() [235]
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::~_List_impl() [231]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_List_base() [244]
[238]    0.0    0.00    0.00       1         std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::_List_impl() [238]
                0.00    0.00       1/1           std::allocator<std::_List_node<product> >::allocator() [165]
                0.00    0.00       1/4           std::__detail::_List_node_header::_List_node_header() [47]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::~_List_base() [245]
[239]    0.0    0.00    0.00       1         std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::~_List_impl() [239]
                0.00    0.00       1/1           std::allocator<std::_List_node<product> >::~allocator() [166]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
[240]    0.0    0.00    0.00       1         std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_node() [240]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<product> > >::allocate(std::allocator<std::_List_node<product> >&, unsigned long) [208]
-----------------------------------------------
                0.00    0.00       1/1           void std::__cxx11::list<product, std::allocator<product> >::_M_insert<product const&>(std::_List_iterator<product>, product const&) [269]
[241]    0.0    0.00    0.00       1         std::__cxx11::_List_base<product, std::allocator<product> >::_M_inc_size(unsigned long) [241]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_M_clear() [243]
[242]    0.0    0.00    0.00       1         std::__cxx11::_List_base<product, std::allocator<product> >::_M_put_node(std::_List_node<product>*) [242]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<product> > >::deallocate(std::allocator<std::_List_node<product> >&, std::_List_node<product>*, unsigned long) [206]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::~_List_base() [245]
[243]    0.0    0.00    0.00       1         std::__cxx11::_List_base<product, std::allocator<product> >::_M_clear() [243]
                0.00    0.00       1/14          std::_List_node<product>::_M_valptr() [16]
                0.00    0.00       1/2           std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_Node_allocator() [87]
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<product> > >::destroy<product>(std::allocator<std::_List_node<product> >&, product*) [207]
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_M_put_node(std::_List_node<product>*) [242]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<product, std::allocator<product> >::list() [271]
[244]    0.0    0.00    0.00       1         std::__cxx11::_List_base<product, std::allocator<product> >::_List_base() [244]
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::_List_impl() [238]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<product, std::allocator<product> >::~list() [379]
[245]    0.0    0.00    0.00       1         std::__cxx11::_List_base<product, std::allocator<product> >::~_List_base() [245]
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_M_clear() [243]
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::~_List_impl() [239]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_base() [252]
[246]    0.0    0.00    0.00       1         std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::_List_impl() [246]
                0.00    0.00       1/4           std::__detail::_List_node_header::_List_node_header() [47]
                0.00    0.00       1/1           std::allocator<std::_List_node<customer> >::allocator() [167]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::~_List_base() [253]
[247]    0.0    0.00    0.00       1         std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::~_List_impl() [247]
                0.00    0.00       1/1           std::allocator<std::_List_node<customer> >::~allocator() [168]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
[248]    0.0    0.00    0.00       1         std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_node() [248]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<customer> > >::allocate(std::allocator<std::_List_node<customer> >&, unsigned long) [212]
-----------------------------------------------
                0.00    0.00       1/1           void std::__cxx11::list<customer, std::allocator<customer> >::_M_insert<customer const&>(std::_List_iterator<customer>, customer const&) [273]
[249]    0.0    0.00    0.00       1         std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_inc_size(unsigned long) [249]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_clear() [251]
[250]    0.0    0.00    0.00       1         std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_put_node(std::_List_node<customer>*) [250]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<customer> > >::deallocate(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*, unsigned long) [210]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::~_List_base() [253]
[251]    0.0    0.00    0.00       1         std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_clear() [251]
                0.00    0.00       1/7           std::_List_node<customer>::_M_valptr() [22]
                0.00    0.00       1/2           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_Node_allocator() [88]
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<customer> > >::destroy<customer>(std::allocator<std::_List_node<customer> >&, customer*) [211]
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_put_node(std::_List_node<customer>*) [250]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<customer, std::allocator<customer> >::list() [275]
[252]    0.0    0.00    0.00       1         std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_base() [252]
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::_List_impl() [246]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<customer, std::allocator<customer> >::~list() [382]
[253]    0.0    0.00    0.00       1         std::__cxx11::_List_base<customer, std::allocator<customer> >::~_List_base() [253]
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::~_List_impl() [247]
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_clear() [251]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_base() [260]
[254]    0.0    0.00    0.00       1         std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::_List_impl() [254]
                0.00    0.00       1/4           std::__detail::_List_node_header::_List_node_header() [47]
                0.00    0.00       1/1           std::allocator<std::_List_node<supplier> >::allocator() [169]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::~_List_base() [261]
[255]    0.0    0.00    0.00       1         std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::~_List_impl() [255]
                0.00    0.00       1/1           std::allocator<std::_List_node<supplier> >::~allocator() [170]
-----------------------------------------------
                0.00    0.00       1/1           std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
[256]    0.0    0.00    0.00       1         std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_node() [256]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<supplier> > >::allocate(std::allocator<std::_List_node<supplier> >&, unsigned long) [216]
-----------------------------------------------
                0.00    0.00       1/1           void std::__cxx11::list<supplier, std::allocator<supplier> >::_M_insert<supplier const&>(std::_List_iterator<supplier>, supplier const&) [277]
[257]    0.0    0.00    0.00       1         std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_inc_size(unsigned long) [257]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_clear() [259]
[258]    0.0    0.00    0.00       1         std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_put_node(std::_List_node<supplier>*) [258]
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_List_node<supplier> > >::deallocate(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*, unsigned long) [214]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::~_List_base() [261]
[259]    0.0    0.00    0.00       1         std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_clear() [259]
                0.00    0.00       1/6           std::_List_node<supplier>::_M_valptr() [32]
                0.00    0.00       1/2           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_Node_allocator() [89]
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::destroy<supplier>(std::allocator<std::_List_node<supplier> >&, supplier*) [215]
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_put_node(std::_List_node<supplier>*) [258]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<supplier, std::allocator<supplier> >::list() [279]
[260]    0.0    0.00    0.00       1         std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_base() [260]
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::_List_impl() [254]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<supplier, std::allocator<supplier> >::~list() [385]
[261]    0.0    0.00    0.00       1         std::__cxx11::_List_base<supplier, std::allocator<supplier> >::~_List_base() [261]
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::~_List_impl() [255]
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_clear() [259]
-----------------------------------------------
                0.00    0.00       1/1           void std::__cxx11::list<transaction, std::allocator<transaction> >::_M_insert<transaction const&>(std::_List_iterator<transaction>, transaction const&) [263]
[262]    0.0    0.00    0.00       1         std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_node() [232]
                0.00    0.00       1/2           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_Node_allocator() [86]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::__allocated_ptr(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*) [188]
                0.00    0.00       1/2           std::_List_node<transaction>::_M_valptr() [81]
                0.00    0.00       1/4           transaction const& std::forward<transaction const&>(std::remove_reference<transaction const&>::type&) [48]
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::construct<transaction, transaction const&>(std::allocator<std::_List_node<transaction> >&, transaction*, transaction const&) [205]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::operator=(decltype(nullptr)) [190]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::~__allocated_ptr() [189]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<transaction, std::allocator<transaction> >::push_back(transaction const&) [264]
[263]    0.0    0.00    0.00       1         void std::__cxx11::list<transaction, std::allocator<transaction> >::_M_insert<transaction const&>(std::_List_iterator<transaction>, transaction const&) [263]
                0.00    0.00       1/4           transaction const& std::forward<transaction const&>(std::remove_reference<transaction const&>::type&) [48]
                0.00    0.00       1/1           std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&) [262]
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_inc_size(unsigned long) [233]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[264]    0.0    0.00    0.00       1         std::__cxx11::list<transaction, std::allocator<transaction> >::push_back(transaction const&) [264]
                0.00    0.00       1/4           std::__cxx11::list<transaction, std::allocator<transaction> >::end() [43]
                0.00    0.00       1/1           void std::__cxx11::list<transaction, std::allocator<transaction> >::_M_insert<transaction const&>(std::_List_iterator<transaction>, transaction const&) [263]
-----------------------------------------------
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [110]
[265]    0.0    0.00    0.00       1         std::__cxx11::list<transaction, std::allocator<transaction> >::list() [265]
                0.00    0.00       1/1           std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_base() [236]
-----------------------------------------------
                0.00    0.00       1/1           void std::__cxx11::list<product, std::allocator<product> >::_M_insert<product const&>(std::_List_iterator<product>, product const&) [269]
[266]    0.0    0.00    0.00       1         std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_node() [240]
                0.00    0.00       1/2           std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_Node_allocator() [87]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<product> > >::__allocated_ptr(std::allocator<std::_List_node<product> >&, std::_List_node<product>*) [191]
                0.00    0.00       1/4           product const& std::forward<product const&>(std::remove_reference<product const&>::type&) [49]
                0.00    0.00       1/14          std::_List_node<product>::_M_valptr() [16]
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<product> > >::construct<product, product const&>(std::allocator<std::_List_node<product> >&, product*, product const&) [209]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<product> > >::operator=(decltype(nullptr)) [193]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<product> > >::~__allocated_ptr() [192]
-----------------------------------------------
                0.00    0.00       1/1           Admin::top_three_product() [119]
[267]    0.0    0.00    0.00       1         void std::__cxx11::list<product, std::allocator<product> >::sort<Admin::top_three_product()::{lambda(product&, product&)#2}>(Admin::top_three_product()::{lambda(product&, product&)#2}) [267]
-----------------------------------------------
                0.00    0.00       1/1           Admin::top_three_product() [119]
[268]    0.0    0.00    0.00       1         void std::__cxx11::list<product, std::allocator<product> >::sort<Admin::top_three_product()::{lambda(product&, product&)#1}>(Admin::top_three_product()::{lambda(product&, product&)#1}) [268]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<product, std::allocator<product> >::push_back(product const&) [270]
[269]    0.0    0.00    0.00       1         void std::__cxx11::list<product, std::allocator<product> >::_M_insert<product const&>(std::_List_iterator<product>, product const&) [269]
                0.00    0.00       1/4           product const& std::forward<product const&>(std::remove_reference<product const&>::type&) [49]
                0.00    0.00       1/1           std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&) [266]
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_M_inc_size(unsigned long) [241]
-----------------------------------------------
                0.00    0.00       1/1           supplier::add_product() [127]
[270]    0.0    0.00    0.00       1         std::__cxx11::list<product, std::allocator<product> >::push_back(product const&) [270]
                0.00    0.00       1/7           std::__cxx11::list<product, std::allocator<product> >::end() [24]
                0.00    0.00       1/1           void std::__cxx11::list<product, std::allocator<product> >::_M_insert<product const&>(std::_List_iterator<product>, product const&) [269]
-----------------------------------------------
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [110]
[271]    0.0    0.00    0.00       1         std::__cxx11::list<product, std::allocator<product> >::list() [271]
                0.00    0.00       1/1           std::__cxx11::_List_base<product, std::allocator<product> >::_List_base() [244]
-----------------------------------------------
                0.00    0.00       1/1           void std::__cxx11::list<customer, std::allocator<customer> >::_M_insert<customer const&>(std::_List_iterator<customer>, customer const&) [273]
[272]    0.0    0.00    0.00       1         std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_node() [248]
                0.00    0.00       1/2           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_Node_allocator() [88]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::__allocated_ptr(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*) [194]
                0.00    0.00       1/4           customer const& std::forward<customer const&>(std::remove_reference<customer const&>::type&) [50]
                0.00    0.00       1/7           std::_List_node<customer>::_M_valptr() [22]
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<customer> > >::construct<customer, customer const&>(std::allocator<std::_List_node<customer> >&, customer*, customer const&) [213]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::operator=(decltype(nullptr)) [196]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::~__allocated_ptr() [195]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<customer, std::allocator<customer> >::push_back(customer const&) [274]
[273]    0.0    0.00    0.00       1         void std::__cxx11::list<customer, std::allocator<customer> >::_M_insert<customer const&>(std::_List_iterator<customer>, customer const&) [273]
                0.00    0.00       1/4           customer const& std::forward<customer const&>(std::remove_reference<customer const&>::type&) [50]
                0.00    0.00       1/1           std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&) [272]
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_inc_size(unsigned long) [249]
-----------------------------------------------
                0.00    0.00       1/1           customer::register_customer() [126]
[274]    0.0    0.00    0.00       1         std::__cxx11::list<customer, std::allocator<customer> >::push_back(customer const&) [274]
                0.00    0.00       1/4           std::__cxx11::list<customer, std::allocator<customer> >::end() [45]
                0.00    0.00       1/1           void std::__cxx11::list<customer, std::allocator<customer> >::_M_insert<customer const&>(std::_List_iterator<customer>, customer const&) [273]
-----------------------------------------------
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [110]
[275]    0.0    0.00    0.00       1         std::__cxx11::list<customer, std::allocator<customer> >::list() [275]
                0.00    0.00       1/1           std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_base() [252]
-----------------------------------------------
                0.00    0.00       1/1           void std::__cxx11::list<supplier, std::allocator<supplier> >::_M_insert<supplier const&>(std::_List_iterator<supplier>, supplier const&) [277]
[276]    0.0    0.00    0.00       1         std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_node() [256]
                0.00    0.00       1/2           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_Node_allocator() [89]
                0.00    0.00       1/4           supplier const& std::forward<supplier const&>(std::remove_reference<supplier const&>::type&) [51]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::__allocated_ptr(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*) [197]
                0.00    0.00       1/6           std::_List_node<supplier>::_M_valptr() [32]
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::construct<supplier, supplier const&>(std::allocator<std::_List_node<supplier> >&, supplier*, supplier const&) [217]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::operator=(decltype(nullptr)) [199]
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::~__allocated_ptr() [198]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::list<supplier, std::allocator<supplier> >::push_back(supplier const&) [278]
[277]    0.0    0.00    0.00       1         void std::__cxx11::list<supplier, std::allocator<supplier> >::_M_insert<supplier const&>(std::_List_iterator<supplier>, supplier const&) [277]
                0.00    0.00       1/4           supplier const& std::forward<supplier const&>(std::remove_reference<supplier const&>::type&) [51]
                0.00    0.00       1/1           std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&) [276]
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_inc_size(unsigned long) [257]
-----------------------------------------------
                0.00    0.00       1/1           supplier::register_supplier() [130]
[278]    0.0    0.00    0.00       1         std::__cxx11::list<supplier, std::allocator<supplier> >::push_back(supplier const&) [278]
                0.00    0.00       1/5           std::__cxx11::list<supplier, std::allocator<supplier> >::end() [35]
                0.00    0.00       1/1           void std::__cxx11::list<supplier, std::allocator<supplier> >::_M_insert<supplier const&>(std::_List_iterator<supplier>, supplier const&) [277]
-----------------------------------------------
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [110]
[279]    0.0    0.00    0.00       1         std::__cxx11::list<supplier, std::allocator<supplier> >::list() [279]
                0.00    0.00       1/1           std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_base() [260]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[280]    0.0    0.00    0.00       1         std::__cxx11::to_string(int) [280]
                0.00    0.00       1/1           unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int) [281]
                0.00    0.00       1/1           void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int) [282]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::to_string(int) [280]
[281]    0.0    0.00    0.00       1         unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int) [281]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::to_string(int) [280]
[282]    0.0    0.00    0.00       1         void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int) [282]
-----------------------------------------------
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::__allocated_ptr(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*) [188]
[283]    0.0    0.00    0.00       1         std::allocator<std::_List_node<transaction> >* std::__addressof<std::allocator<std::_List_node<transaction> > >(std::allocator<std::_List_node<transaction> >&) [283]
-----------------------------------------------
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<product> > >::__allocated_ptr(std::allocator<std::_List_node<product> >&, std::_List_node<product>*) [191]
[284]    0.0    0.00    0.00       1         std::allocator<std::_List_node<product> >* std::__addressof<std::allocator<std::_List_node<product> > >(std::allocator<std::_List_node<product> >&) [284]
-----------------------------------------------
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::__allocated_ptr(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*) [194]
[285]    0.0    0.00    0.00       1         std::allocator<std::_List_node<customer> >* std::__addressof<std::allocator<std::_List_node<customer> > >(std::allocator<std::_List_node<customer> >&) [285]
-----------------------------------------------
                0.00    0.00       1/1           std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::__allocated_ptr(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*) [197]
[286]    0.0    0.00    0.00       1         std::allocator<std::_List_node<supplier> >* std::__addressof<std::allocator<std::_List_node<supplier> > >(std::allocator<std::_List_node<supplier> >&) [286]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&) [291]
[287]    0.0    0.00    0.00       1         int (customer::*&std::__get_helper<0ul, int (customer::*)(), customer*>(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&))() [287]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_M_head(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&) [179]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&) [293]
[288]    0.0    0.00    0.00       1         customer*& std::__get_helper<1ul, customer*>(std::_Tuple_impl<1ul, customer*>&) [288]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, customer*>::_M_head(std::_Tuple_impl<1ul, customer*>&) [182]
-----------------------------------------------
                0.00    0.00       1/1           std::__invoke_result<int (customer::*)(), customer*>::type std::__invoke<int (customer::*)(), customer*>(int (customer::*&&)(), customer*&&) [297]
[289]    0.0    0.00    0.00       1         int std::__invoke_impl<int, int (customer::*)(), customer*>(std::__invoke_memfun_deref, int (customer::*&&)(), customer*&&) [289]
                0.00    0.00       1/2           customer*&& std::forward<customer*>(std::remove_reference<customer*>::type&) [95]
                0.00    0.00       1/1           customer::place_order() [124]
-----------------------------------------------
                0.00    0.00       1/1           int std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [226]
[290]    0.0    0.00    0.00       1         std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&) [290]
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&) [291]
                0.00    0.00       1/1           int (customer::*&&std::forward<int (customer::*&&)()>(std::remove_reference<int (customer::*&&)()>::type&))() [295]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&) [290]
[291]    0.0    0.00    0.00       1         std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&) [291]
                0.00    0.00       1/1           int (customer::*&std::__get_helper<0ul, int (customer::*)(), customer*>(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&))() [287]
-----------------------------------------------
                0.00    0.00       1/1           int std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [226]
[292]    0.0    0.00    0.00       1         std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&) [292]
                0.00    0.00       1/1           customer*&& std::forward<customer*&&>(std::remove_reference<customer*&&>::type&) [296]
                0.00    0.00       1/1           std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&) [293]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&) [292]
[293]    0.0    0.00    0.00       1         std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&) [293]
                0.00    0.00       1/1           customer*& std::__get_helper<1ul, customer*>(std::_Tuple_impl<1ul, customer*>&) [288]
-----------------------------------------------
                0.00    0.00       1/1           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [299]
[294]    0.0    0.00    0.00       1         std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [294]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&) [290]
[295]    0.0    0.00    0.00       1         int (customer::*&&std::forward<int (customer::*&&)()>(std::remove_reference<int (customer::*&&)()>::type&))() [295]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&) [292]
[296]    0.0    0.00    0.00       1         customer*&& std::forward<customer*&&>(std::remove_reference<customer*&&>::type&) [296]
-----------------------------------------------
                0.00    0.00       1/1           int std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [226]
[297]    0.0    0.00    0.00       1         std::__invoke_result<int (customer::*)(), customer*>::type std::__invoke<int (customer::*)(), customer*>(int (customer::*&&)(), customer*&&) [297]
                0.00    0.00       1/2           customer*&& std::forward<customer*>(std::remove_reference<customer*>::type&) [95]
                0.00    0.00       1/1           int std::__invoke_impl<int, int (customer::*)(), customer*>(std::__invoke_memfun_deref, int (customer::*&&)(), customer*&&) [289]
                0.00    0.00       1/7           int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))() [25]
-----------------------------------------------
                0.00    0.00       1/1           std::thread::joinable() const [162]
[298]    0.0    0.00    0.00       1         std::operator==(std::thread::id, std::thread::id) [298]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[299]    0.0    0.00    0.00       1         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [299]
                0.00    0.00       1/1           std::integral_constant<bool, true>::operator bool() const [161]
                0.00    0.00       1/1           std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [294]
-----------------------------------------------
                0.00    0.00       1/1           customer::place_order() [124]
[300]    0.0    0.00    0.00       1         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [300]
-----------------------------------------------

Index by function name

  [99] _GLOBAL__sub_I_ad     [161] std::integral_constant<bool, true>::operator bool() const [241] std::__cxx11::_List_base<product, std::allocator<product> >::_M_inc_size(unsigned long)
  [61] admin_corner()        [162] std::thread::joinable() const [242] std::__cxx11::_List_base<product, std::allocator<product> >::_M_put_node(std::_List_node<product>*)
 [100] customer_corner()      [56] std::__cxx11::list<transaction, std::allocator<transaction> >::empty() const [87] std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_Node_allocator()
 [101] supplier_corner()      [41] std::__cxx11::list<product, std::allocator<product> >::empty() const [243] std::__cxx11::_List_base<product, std::allocator<product> >::_M_clear()
 [102] product_file_to_list() [57] std::__cxx11::list<customer, std::allocator<customer> >::empty() const [244] std::__cxx11::_List_base<product, std::allocator<product> >::_List_base()
 [103] product_list_to_file() [42] std::__cxx11::list<supplier, std::allocator<supplier> >::empty() const [245] std::__cxx11::_List_base<product, std::allocator<product> >::~_List_base()
 [104] customer_file_to_list() [163] std::allocator<std::_List_node<transaction> >::allocator() [246] std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::_List_impl()
 [105] customer_list_to_file() [164] std::allocator<std::_List_node<transaction> >::~allocator() [247] std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_impl::~_List_impl()
 [106] supplier_file_to_list() [165] std::allocator<std::_List_node<product> >::allocator() [248] std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_node()
 [107] supplier_list_to_file() [166] std::allocator<std::_List_node<product> >::~allocator() [249] std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_inc_size(unsigned long)
 [108] transaction_file_to_list() [167] std::allocator<std::_List_node<customer> >::allocator() [250] std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_put_node(std::_List_node<customer>*)
 [109] transaction_list_to_file() [168] std::allocator<std::_List_node<customer> >::~allocator() [88] std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_get_Node_allocator()
 [110] __static_initialization_and_destruction_0(int, int) [169] std::allocator<std::_List_node<supplier> >::allocator() [251] std::__cxx11::_List_base<customer, std::allocator<customer> >::_M_clear()
  [62] __gthread_active_p()  [170] std::allocator<std::_List_node<supplier> >::~allocator() [252] std::__cxx11::_List_base<customer, std::allocator<customer> >::_List_base()
 [111] __gthread_mutex_lock(pthread_mutex_t*) [171] std::_Head_base<0ul, int (customer::*)(), false>::_M_head(std::_Head_base<0ul, int (customer::*)(), false>&) [253] std::__cxx11::_List_base<customer, std::allocator<customer> >::~_List_base()
 [112] __gthread_mutex_unlock(pthread_mutex_t*) [172] std::_Head_base<0ul, int (customer::*)(), false>::_Head_base<int (customer::*)()>(int (customer::*&&)()) [254] std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::_List_impl()
 [113] transaction::generate_bill(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, int, int) [80] std::_Head_base<0ul, std::thread::_State*, false>::_M_head(std::_Head_base<0ul, std::thread::_State*, false>&) [255] std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_impl::~_List_impl()
 [114] transaction::transaction(transaction const&) [173] std::_Head_base<0ul, std::thread::_State*, false>::_Head_base() [256] std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_node()
 [115] transaction::transaction() [174] std::_Head_base<1ul, customer*, false>::_M_head(std::_Head_base<1ul, customer*, false>&) [257] std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_inc_size(unsigned long)
  [63] transaction::~transaction() [175] std::_Head_base<1ul, customer*, false>::_Head_base<customer*&>(customer*&) [258] std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_put_node(std::_List_node<supplier>*)
  [64] validations::check_name(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [176] std::_Head_base<1ul, std::default_delete<std::thread::_State>, true>::_Head_base() [89] std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_get_Node_allocator()
  [13] validations::check_digit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [81] std::_List_node<transaction>::_M_valptr() [259] std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_M_clear()
  [36] validations::take_choice() [16] std::_List_node<product>::_M_valptr() [260] std::__cxx11::_List_base<supplier, std::allocator<supplier> >::_List_base()
  [65] validations::check_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [22] std::_List_node<customer>::_M_valptr() [261] std::__cxx11::_List_base<supplier, std::allocator<supplier> >::~_List_base()
  [66] validations::check_address(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [32] std::_List_node<supplier>::_M_valptr() [262] std::_List_node<transaction>* std::__cxx11::list<transaction, std::allocator<transaction> >::_M_create_node<transaction const&>(transaction const&)
 [116] validations::password_check() [177] std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::unique_ptr<std::default_delete<std::thread::_State>, void>(std::thread::_State*) [43] std::__cxx11::list<transaction, std::allocator<transaction> >::end()
 [117] validations::take_customer_id() [178] std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >::~unique_ptr() [90] std::__cxx11::list<transaction, std::allocator<transaction> >::begin()
 [118] validations::take_supplier_id() [179] std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_M_head(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&) [263] void std::__cxx11::list<transaction, std::allocator<transaction> >::_M_insert<transaction const&>(std::_List_iterator<transaction>, transaction const&)
 [119] Admin::top_three_product() [180] std::_Tuple_impl<0ul, int (customer::*)(), customer*>::_Tuple_impl<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [264] std::__cxx11::list<transaction, std::allocator<transaction> >::push_back(transaction const&)
 [120] Admin::Admin()         [82] std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_M_head(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&) [265] std::__cxx11::list<transaction, std::allocator<transaction> >::list()
  [67] product::get_product_id() [181] std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >::_Tuple_impl() [266] std::_List_node<product>* std::__cxx11::list<product, std::allocator<product> >::_M_create_node<product const&>(product const&)
  [68] product::get_units_sold() [182] std::_Tuple_impl<1ul, customer*>::_M_head(std::_Tuple_impl<1ul, customer*>&) [24] std::__cxx11::list<product, std::allocator<product> >::end()
 [121] product::set_units_sold(int) [183] std::_Tuple_impl<1ul, customer*>::_Tuple_impl<customer*&>(customer*&) [267] void std::__cxx11::list<product, std::allocator<product> >::sort<Admin::top_three_product()::{lambda(product&, product&)#2}>(Admin::top_three_product()::{lambda(product&, product&)#2})
  [69] product::get_no_of_units() [184] std::_Tuple_impl<1ul, std::default_delete<std::thread::_State> >::_Tuple_impl() [268] void std::__cxx11::list<product, std::allocator<product> >::sort<Admin::top_three_product()::{lambda(product&, product&)#1}>(Admin::top_three_product()::{lambda(product&, product&)#1})
 [122] product::set_no_of_units(int) [33] std::_List_iterator<transaction>::_List_iterator(std::__detail::_List_node_base*) [44] std::__cxx11::list<product, std::allocator<product> >::begin()
  [70] product::get_product_name[abi:cxx11]() [185] std::_List_iterator<transaction>::operator++(int) [269] void std::__cxx11::list<product, std::allocator<product> >::_M_insert<product const&>(std::_List_iterator<product>, product const&)
  [71] product::get_cost()    [18] std::_List_iterator<product>::_List_iterator(std::__detail::_List_node_base*) [270] std::__cxx11::list<product, std::allocator<product> >::push_back(product const&)
  [72] product::product()     [83] std::_List_iterator<product>::operator++(int) [271] std::__cxx11::list<product, std::allocator<product> >::list()
 [123] product::product(product const&) [23] std::_List_iterator<customer>::_List_iterator(std::__detail::_List_node_base*) [272] std::_List_node<customer>* std::__cxx11::list<customer, std::allocator<customer> >::_M_create_node<customer const&>(customer const&)
  [55] product::~product()   [186] std::_List_iterator<customer>::operator++() [45] std::__cxx11::list<customer, std::allocator<customer> >::end()
 [124] customer::place_order() [19] std::_List_iterator<supplier>::_List_iterator(std::__detail::_List_node_base*) [58] std::__cxx11::list<customer, std::allocator<customer> >::begin()
 [125] customer::login_customer() [187] std::_List_iterator<supplier>::operator++(int) [273] void std::__cxx11::list<customer, std::allocator<customer> >::_M_insert<customer const&>(std::_List_iterator<customer>, customer const&)
  [73] customer::get_customer_id() [188] std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::__allocated_ptr(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*) [274] std::__cxx11::list<customer, std::allocator<customer> >::push_back(customer const&)
  [74] customer::get_customer_name[abi:cxx11]() [189] std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::~__allocated_ptr() [275] std::__cxx11::list<customer, std::allocator<customer> >::list()
 [126] customer::register_customer() [190] std::__allocated_ptr<std::allocator<std::_List_node<transaction> > >::operator=(decltype(nullptr)) [276] std::_List_node<supplier>* std::__cxx11::list<supplier, std::allocator<supplier> >::_M_create_node<supplier const&>(supplier const&)
  [28] customer::customer()  [191] std::__allocated_ptr<std::allocator<std::_List_node<product> > >::__allocated_ptr(std::allocator<std::_List_node<product> >&, std::_List_node<product>*) [35] std::__cxx11::list<supplier, std::allocator<supplier> >::end()
  [75] customer::customer(customer const&) [192] std::__allocated_ptr<std::allocator<std::_List_node<product> > >::~__allocated_ptr() [59] std::__cxx11::list<supplier, std::allocator<supplier> >::begin()
  [29] customer::~customer() [193] std::__allocated_ptr<std::allocator<std::_List_node<product> > >::operator=(decltype(nullptr)) [277] void std::__cxx11::list<supplier, std::allocator<supplier> >::_M_insert<supplier const&>(std::_List_iterator<supplier>, supplier const&)
 [127] supplier::add_product() [194] std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::__allocated_ptr(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*) [278] std::__cxx11::list<supplier, std::allocator<supplier> >::push_back(supplier const&)
 [128] supplier::login_supplier() [195] std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::~__allocated_ptr() [279] std::__cxx11::list<supplier, std::allocator<supplier> >::list()
 [129] supplier::get_supplier_id() [196] std::__allocated_ptr<std::allocator<std::_List_node<customer> > >::operator=(decltype(nullptr)) [9] std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)
  [76] supplier::get_supplier_name[abi:cxx11]() [197] std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::__allocated_ptr(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*) [91] std::__cxx11::stol(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)
 [130] supplier::register_supplier() [198] std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::~__allocated_ptr() [280] std::__cxx11::to_string(int)
 [131] supplier::supplier(supplier const&) [199] std::__allocated_ptr<std::allocator<std::_List_node<supplier> > >::operator=(decltype(nullptr)) [281] unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)
  [37] supplier::supplier()  [200] std::__uniq_ptr_data<std::thread::_State, std::default_delete<std::thread::_State>, true, true>::__uniq_ptr_impl(std::thread::_State*) [46] std::__detail::_List_node_header::_M_init()
  [38] supplier::~supplier()  [84] std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::_M_ptr() [47] std::__detail::_List_node_header::_List_node_header()
 [132] __gnu_cxx::new_allocator<std::_List_node<transaction> >::deallocate(std::_List_node<transaction>*, unsigned long) [201] std::__uniq_ptr_impl<std::thread::_State, std::default_delete<std::thread::_State> >::__uniq_ptr_impl(std::thread::_State*) [282] void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)
 [133] void __gnu_cxx::new_allocator<std::_List_node<transaction> >::destroy<transaction>(transaction*) [202] std::allocator_traits<std::allocator<std::_List_node<transaction> > >::deallocate(std::allocator<std::_List_node<transaction> >&, std::_List_node<transaction>*, unsigned long) [283] std::allocator<std::_List_node<transaction> >* std::__addressof<std::allocator<std::_List_node<transaction> > >(std::allocator<std::_List_node<transaction> >&)
 [134] __gnu_cxx::new_allocator<std::_List_node<transaction> >::allocate(unsigned long, void const*) [203] void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::destroy<transaction>(std::allocator<std::_List_node<transaction> >&, transaction*) [284] std::allocator<std::_List_node<product> >* std::__addressof<std::allocator<std::_List_node<product> > >(std::allocator<std::_List_node<product> >&)
 [135] void __gnu_cxx::new_allocator<std::_List_node<transaction> >::construct<transaction, transaction const&>(transaction*, transaction const&) [204] std::allocator_traits<std::allocator<std::_List_node<transaction> > >::allocate(std::allocator<std::_List_node<transaction> >&, unsigned long) [285] std::allocator<std::_List_node<customer> >* std::__addressof<std::allocator<std::_List_node<customer> > >(std::allocator<std::_List_node<customer> >&)
 [136] __gnu_cxx::new_allocator<std::_List_node<transaction> >::new_allocator() [205] void std::allocator_traits<std::allocator<std::_List_node<transaction> > >::construct<transaction, transaction const&>(std::allocator<std::_List_node<transaction> >&, transaction*, transaction const&) [286] std::allocator<std::_List_node<supplier> >* std::__addressof<std::allocator<std::_List_node<supplier> > >(std::allocator<std::_List_node<supplier> >&)
 [137] __gnu_cxx::new_allocator<std::_List_node<transaction> >::~new_allocator() [206] std::allocator_traits<std::allocator<std::_List_node<product> > >::deallocate(std::allocator<std::_List_node<product> >&, std::_List_node<product>*, unsigned long) [287] int (customer::*&std::__get_helper<0ul, int (customer::*)(), customer*>(std::_Tuple_impl<0ul, int (customer::*)(), customer*>&))()
 [138] __gnu_cxx::new_allocator<std::_List_node<product> >::deallocate(std::_List_node<product>*, unsigned long) [207] void std::allocator_traits<std::allocator<std::_List_node<product> > >::destroy<product>(std::allocator<std::_List_node<product> >&, product*) [92] std::thread::_State*& std::__get_helper<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::_Tuple_impl<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >&)
 [139] void __gnu_cxx::new_allocator<std::_List_node<product> >::destroy<product>(product*) [208] std::allocator_traits<std::allocator<std::_List_node<product> > >::allocate(std::allocator<std::_List_node<product> >&, unsigned long) [288] customer*& std::__get_helper<1ul, customer*>(std::_Tuple_impl<1ul, customer*>&)
 [140] __gnu_cxx::new_allocator<std::_List_node<product> >::allocate(unsigned long, void const*) [209] void std::allocator_traits<std::allocator<std::_List_node<product> > >::construct<product, product const&>(std::allocator<std::_List_node<product> >&, product*, product const&) [289] int std::__invoke_impl<int, int (customer::*)(), customer*>(std::__invoke_memfun_deref, int (customer::*&&)(), customer*&&)
 [141] void __gnu_cxx::new_allocator<std::_List_node<product> >::construct<product, product const&>(product*, product const&) [210] std::allocator_traits<std::allocator<std::_List_node<customer> > >::deallocate(std::allocator<std::_List_node<customer> >&, std::_List_node<customer>*, unsigned long) [290] std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&)
 [142] __gnu_cxx::new_allocator<std::_List_node<product> >::new_allocator() [211] void std::allocator_traits<std::allocator<std::_List_node<customer> > >::destroy<customer>(std::allocator<std::_List_node<customer> >&, customer*) [291] std::tuple_element<0ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<0ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&)
 [143] __gnu_cxx::new_allocator<std::_List_node<product> >::~new_allocator() [212] std::allocator_traits<std::allocator<std::_List_node<customer> > >::allocate(std::allocator<std::_List_node<customer> >&, unsigned long) [93] std::tuple_element<0ul, std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> > >::type& std::get<0ul, std::thread::_State*, std::default_delete<std::thread::_State> >(std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >&)
 [144] __gnu_cxx::new_allocator<std::_List_node<customer> >::deallocate(std::_List_node<customer>*, unsigned long) [213] void std::allocator_traits<std::allocator<std::_List_node<customer> > >::construct<customer, customer const&>(std::allocator<std::_List_node<customer> >&, customer*, customer const&) [292] std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type&& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&&)
 [145] void __gnu_cxx::new_allocator<std::_List_node<customer> >::destroy<customer>(customer*) [214] std::allocator_traits<std::allocator<std::_List_node<supplier> > >::deallocate(std::allocator<std::_List_node<supplier> >&, std::_List_node<supplier>*, unsigned long) [293] std::tuple_element<1ul, std::tuple<int (customer::*)(), customer*> >::type& std::get<1ul, int (customer::*)(), customer*>(std::tuple<int (customer::*)(), customer*>&)
 [146] __gnu_cxx::new_allocator<std::_List_node<customer> >::allocate(unsigned long, void const*) [215] void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::destroy<supplier>(std::allocator<std::_List_node<supplier> >&, supplier*) [294] std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
 [147] void __gnu_cxx::new_allocator<std::_List_node<customer> >::construct<customer, customer const&>(customer*, customer const&) [216] std::allocator_traits<std::allocator<std::_List_node<supplier> > >::allocate(std::allocator<std::_List_node<supplier> >&, unsigned long) [94] std::remove_reference<std::tuple<int (customer::*)(), customer*>&>::type&& std::move<std::tuple<int (customer::*)(), customer*>&>(std::tuple<int (customer::*)(), customer*>&)
 [148] __gnu_cxx::new_allocator<std::_List_node<customer> >::new_allocator() [217] void std::allocator_traits<std::allocator<std::_List_node<supplier> > >::construct<supplier, supplier const&>(std::allocator<std::_List_node<supplier> >&, supplier*, supplier const&) [25] int (customer::*&&std::forward<int (customer::*)()>(std::remove_reference<int (customer::*)()>::type&))()
 [149] __gnu_cxx::new_allocator<std::_List_node<customer> >::~new_allocator() [218] std::mutex::lock() [295] int (customer::*&&std::forward<int (customer::*&&)()>(std::remove_reference<int (customer::*&&)()>::type&))()
 [150] __gnu_cxx::new_allocator<std::_List_node<supplier> >::deallocate(std::_List_node<supplier>*, unsigned long) [219] std::mutex::unlock() [296] customer*&& std::forward<customer*&&>(std::remove_reference<customer*&&>::type&)
 [151] void __gnu_cxx::new_allocator<std::_List_node<supplier> >::destroy<supplier>(supplier*) [220] std::tuple<int (customer::*)(), customer*>::tuple<int (customer::*)(), customer*&, true>(int (customer::*&&)(), customer*&) [95] customer*&& std::forward<customer*>(std::remove_reference<customer*>::type&)
 [152] __gnu_cxx::new_allocator<std::_List_node<supplier> >::allocate(unsigned long, void const*) [221] std::tuple<std::thread::_State*, std::default_delete<std::thread::_State> >::tuple<true, true>() [48] transaction const& std::forward<transaction const&>(std::remove_reference<transaction const&>::type&)
 [153] void __gnu_cxx::new_allocator<std::_List_node<supplier> >::construct<supplier, supplier const&>(supplier*, supplier const&) [222] std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::_State_impl<int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [49] product const& std::forward<product const&>(std::remove_reference<product const&>::type&)
 [154] __gnu_cxx::new_allocator<std::_List_node<supplier> >::new_allocator() [223] std::thread::_State_impl<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> > >::~_State_impl() [50] customer const& std::forward<customer const&>(std::remove_reference<customer const&>::type&)
 [155] __gnu_cxx::new_allocator<std::_List_node<supplier> >::~new_allocator() [224] std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> > std::thread::_S_make_state<std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >, int (customer::*)(), customer*&>(int (customer::*&&)(), customer*&) [51] supplier const& std::forward<supplier const&>(std::remove_reference<supplier const&>::type&)
  [77] __gnu_cxx::__aligned_membuf<transaction>::_M_ptr() [85] std::thread::id::id() [26] customer*& std::forward<customer*&>(std::remove_reference<customer*&>::type&)
  [78] __gnu_cxx::__aligned_membuf<transaction>::_M_addr() [225] std::thread::_State::_State() [297] std::__invoke_result<int (customer::*)(), customer*>::type std::__invoke<int (customer::*)(), customer*>(int (customer::*&&)(), customer*&&)
  [14] __gnu_cxx::__aligned_membuf<product>::_M_ptr() [226] int std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) [298] std::operator==(std::thread::id, std::thread::id)
  [15] __gnu_cxx::__aligned_membuf<product>::_M_addr() [227] std::thread::_Invoker<std::tuple<int (customer::*)(), customer*> >::operator()() [60] std::operator!=(std::_List_iterator<transaction> const&, std::_List_iterator<transaction> const&)
  [20] __gnu_cxx::__aligned_membuf<customer>::_M_ptr() [228] std::thread::thread<int (customer::*)(), customer*&, void>(int (customer::*&&)(), customer*&) [34] std::operator!=(std::_List_iterator<product> const&, std::_List_iterator<product> const&)
  [21] __gnu_cxx::__aligned_membuf<customer>::_M_addr() [229] std::thread::~thread() [52] std::operator!=(std::_List_iterator<customer> const&, std::_List_iterator<customer> const&)
  [30] __gnu_cxx::__aligned_membuf<supplier>::_M_ptr() [230] std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::_List_impl() [53] std::operator!=(std::_List_iterator<supplier> const&, std::_List_iterator<supplier> const&)
  [31] __gnu_cxx::__aligned_membuf<supplier>::_M_addr() [231] std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_impl::~_List_impl() [27] std::operator|(std::_Ios_Openmode, std::_Ios_Openmode)
   [8] int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [232] std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_node() [299] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
  [79] long __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [233] std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_inc_size(unsigned long) [300] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
 [156] __gnu_cxx::new_allocator<std::_List_node<transaction> >::_M_max_size() const [234] std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_put_node(std::_List_node<transaction>*) [10] __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)
 [157] __gnu_cxx::new_allocator<std::_List_node<product> >::_M_max_size() const [86] std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_get_Node_allocator() [11] __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()
 [158] __gnu_cxx::new_allocator<std::_List_node<customer> >::_M_max_size() const [235] std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_M_clear() [12] __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()
 [159] __gnu_cxx::new_allocator<std::_List_node<supplier> >::_M_max_size() const [236] std::__cxx11::_List_base<transaction, std::allocator<transaction> >::_List_base() [96] __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, false>)
  [17] std::_List_iterator<product>::operator->() const [237] std::__cxx11::_List_base<transaction, std::allocator<transaction> >::~_List_base() [97] __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()
 [160] std::_List_iterator<customer>::operator*() const [238] std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::_List_impl() [98] __gnu_cxx::__stoa<long, long, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()
  [39] std::_List_iterator<customer>::operator->() const [239] std::__cxx11::_List_base<product, std::allocator<product> >::_List_impl::~_List_impl() [54] operator new(unsigned long, void*)
  [40] std::_List_iterator<supplier>::operator->() const [240] std::__cxx11::_List_base<product, std::allocator<product> >::_M_get_node()
